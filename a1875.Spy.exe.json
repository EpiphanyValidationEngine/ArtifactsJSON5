{"data": {"CAPA": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1140", "name": "Deobfuscate/Decode Files or Information", "link": "https://attack.mitre.org/techniques/T1140/", "description": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b or type command to reassemble binary fragments into a malicious payload.\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.", "signatures": [{"severity": "INFO", "description": "decode data using Base64 in .NET"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1033", "name": "System Owner/User Discovery", "link": "https://attack.mitre.org/techniques/T1033/", "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nVarious utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.\nOn network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.", "signatures": [{"severity": "INFO", "description": "get session user name"}]}, {"id": "T1087", "name": "Account Discovery", "link": "https://attack.mitre.org/techniques/T1087/", "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system\u2019s files.", "signatures": [{"severity": "INFO", "description": "get session user name"}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture)."}, {"id": "T1056.001", "name": "Keylogging", "link": "https://attack.mitre.org/techniques/T1056/001/", "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\nHooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\nReading raw keystroke data from the hardware buffer.\nWindows Registry modifications.\nCustom drivers.\nModify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions. \n", "signatures": [{"severity": "INFO", "description": "log keystrokes via polling"}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture)."}, {"id": "T1056.001", "name": "Keylogging", "link": "https://attack.mitre.org/techniques/T1056/001/", "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems.\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include:\n\nHooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data.\nReading raw keystroke data from the hardware buffer.\nWindows Registry modifications.\nCustom drivers.\nModify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions. \n", "signatures": [{"severity": "INFO", "description": "log keystrokes via polling"}]}, {"id": "T1115", "name": "Clipboard Data", "link": "https://attack.mitre.org/techniques/T1115/", "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. \nFor example, on Windows adversaries can access clipboard data by using clip.exe or Get-Clipboard. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\nmacOS and Linux also have commands, such as pbpaste, to grab clipboard contents.", "signatures": [{"severity": "INFO", "description": "read clipboard data"}, {"severity": "INFO", "description": "open clipboard"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1106", "name": "Native API", "link": "https://attack.mitre.org/techniques/T1106/", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}]}]}, "VMRay": {"tactics": [{"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "HIGH", "description": "(Process #1) invoice222.exe captures keyboard, queries foreground window and potentially exfiltrates data."}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "HIGH", "description": "(Process #1) invoice222.exe captures keyboard, queries foreground window and potentially exfiltrates data."}]}, {"id": "T1115", "name": "Clipboard Data", "link": "https://attack.mitre.org/techniques/T1115/", "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. \nFor example, on Windows adversaries can access clipboard data by using clip.exe or Get-Clipboard. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\nmacOS and Linux also have commands, such as pbpaste, to grab clipboard contents.", "signatures": [{"severity": "MEDIUM", "description": "(Process #1) invoice222.exe reads data from clipboard."}]}, {"id": "T1119", "name": "Automated Collection", "link": "https://attack.mitre.org/techniques/T1119/", "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \nThis functionality could also be built into remote access tools. \nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.", "signatures": [{"severity": "HIGH", "description": "(Process #1) invoice222.exe captures keyboard, queries foreground window and potentially exfiltrates data."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1010", "name": "Application Window Discovery", "link": "https://attack.mitre.org/techniques/T1010/", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "signatures": [{"severity": "MEDIUM", "description": "(Process #1) invoice222.exe reads the text contents of the foreground window by API (possible keylogging attempt)."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "(Process #1) invoice222.exe enables process privilege \"SeDebugPrivilege\"."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "(Process #1) invoice222.exe enables process privilege \"SeDebugPrivilege\"."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "The process attempted to dynamically load a malicious function"}, {"severity": "UNKNOWN", "description": "The process tried to load dynamically one or more functions."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "UNKNOWN", "description": "The process has tried to detect the debugger probing the use of page guards."}, {"severity": "UNKNOWN", "description": "The process attempted to detect a running debugger using common APIs"}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "UNKNOWN", "description": "The process behaves as a keylogger (keyboard capturing detected)"}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "UNKNOWN", "description": "The process behaves as a keylogger (keyboard capturing detected)"}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "The process originated SMTP requests"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["mscoree.dll", "apphelp.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "uxtheme.dll", "bcrypt.dll", "cryptsp.dll", "rsaenh.dll", "iphlpapi.dll", "dnsapi.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "winnsi.dll", "mswsock.dll", "rasadhlp.dll", "fwpuclnt.dll", "secur32.dll", "schannel.dll"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["mscoree.dll", "apphelp.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "uxtheme.dll", "bcrypt.dll", "cryptsp.dll", "rsaenh.dll", "iphlpapi.dll", "dnsapi.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "winnsi.dll", "mswsock.dll", "rasadhlp.dll", "fwpuclnt.dll", "secur32.dll", "schannel.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["Program ManagerLR4kPn+", "Program ManagerLR4kha", "Program ManagerLR4ktu-", "Program ManagerLR4k8=2", "Program ManagerLR4kdu8", "Program ManagerLR4k@n6", "Program ManagerLR4kH=", "Program ManagerLR4k", "Program ManagerLR4k nR", "Program ManagerLR4khi", "Program ManagerLR4kt2<", "Program ManagerLR4khe", "Program ManagerLR4khn", "Program ManagerLR4k|\" ", "Program ManagerLR4k@mG", "Program ManagerLR4kHO", "Program ManagerLR4k(0", "Program ManagerLR4kHJ", "Program ManagerLR4k`L\"", "Program ManagerLR4kdtI", "Program ManagerLR4k$vD", "Program ManagerLR4k|B;", "Program ManagerLR4kHT", "Program ManagerLR4kH}F", "Program ManagerLR4kpK+", "Program ManagerLR4k`K6", "Program ManagerLR4k(>", "Program ManagerLR4kx[*", "Program ManagerLR4k@KR", "Program ManagerLR4k(G", "Program ManagerLR4kh[5", "Program ManagerLR4kH[Q", "Program ManagerLR4k`JG", "Program ManagerLR4kDSD", "Program ManagerLR4khZF", "Program ManagerLR4k`(R", "Program ManagerLR4k(`", "Program ManagerLR4kLcC", "Program ManagerLR4kHz", "Program ManagerLR4kl+", "Program ManagerLR4kl'", "Program ManagerLR4kh8Q", "Program ManagerLR4kl4", "Program ManagerLR4khzK", "Program ManagerLR4kl0", "Program ManagerLR4k@)B", "Program ManagerLR4kd0D", "Program ManagerLR4k(m", "Program ManagerLR4k(w", "Program ManagerLR4kl@C", "Program ManagerLR4k(r", "Program ManagerLR4k@k<", "Program ManagerLR4klB", "Program ManagerLR4kL#", "Program ManagerLR4k,\"#", "Program ManagerLR4kH{;", "Program ManagerLR4k,!7", "Program ManagerLR4k K.", "Program ManagerLR4k$S2", "Program ManagerLR4k<c&", "Program ManagerLR4kL(", "Program ManagerLR4kl?S", "Program ManagerLR4k,c1", "Program ManagerLR4kL5", "Program ManagerLR4kL0", "Program ManagerLR4kl[", "Program ManagerLR4k`H<", "Program ManagerLR4kD:", "Program ManagerLR4khX;", "Program ManagerLR4k0)%", "Program ManagerLR4kd]", "Program ManagerLR4k@(.", "Program ManagerLR4k )0", "Program ManagerLR4kD02", "Program ManagerLR4kTr!", "Program ManagerLR4k\\@&", "Program ManagerLR4kDC", "Program ManagerLR4k@j(", "Program ManagerLR4kph8", "Program ManagerLR4kdq*", "Program ManagerLR4kL@1", "Program ManagerLR4k$-", "Program ManagerLR4k\\?:", "Program ManagerLR4k0j3", "Program ManagerLR4kTq5", "Program ManagerLR4k0'J", "Program ManagerLR4kDU", "Program ManagerLR4kdo", "Program ManagerLR4kDP", "Program ManagerLR4k87I", "Program ManagerLR4k$6", "Program ManagerLR4ktO!", "Program ManagerLR4k8yC", "Program ManagerLR4k$D", "Program ManagerLR4k<A", "Program ManagerLR4k$@", "Program ManagerLR4k`G(", "Program ManagerLR4ktN5", "Program ManagerLR4k|_ ", "Program ManagerLR4kPG3", "Program ManagerLR4kp%,", "Program ManagerLR4k0GO", "Program ManagerLR4khW'", "Program ManagerLR4k$R", "Program ManagerLR4k|^4", "Program ManagerLR4kDn", "Program ManagerLR4k\\^P", "Program ManagerLR4k8WN", "Program ManagerLR4k$]", "Program ManagerLR4k4OA", "Program ManagerLR4kDw", "Program ManagerLR4kXVC", "Program ManagerLR4kh(", "Program ManagerLR4k`$H", "Program ManagerLR4k$j", "Program ManagerLR4kh1", "Program ManagerLR4k<_@", "Program ManagerLR4k`fB", "Program ManagerLR4k$f", "Program ManagerLR4kh,", "Program ManagerLR4kX4N", "Program ManagerLR4k4-L", "Program ManagerLR4k&1", "Program ManagerLR4k|;P", "Program ManagerLR4k`eR", "Program ManagerLR4k`DM", "Program ManagerLR4kT,A", "Program ManagerLR4k$x", "Program ManagerLR4kx3C", "Program ManagerLR4kH'", "Program ManagerLR4khuQ", "Program ManagerLR4kH\"", "Program ManagerLR4k85>", "Program ManagerLR4k\\<@", "Program ManagerLR4kdmD", "Program ManagerLR4k$O$", "Program ManagerLR4k\\~:", "Program ManagerLR4k4N-", "Program ManagerLR4khW", "Program ManagerLR4kPf%", "Program ManagerLR4k$N8", "Program ManagerLR4k,_#", "Program ManagerLR4kPTO", "Program ManagerLR4k ", "Program ManagerLR4k,MM", "Program ManagerLR4k$", "Program ManagerLR4k4~Q", "Program ManagerLR4kxd2", "Program ManagerLR4k\"", "Program ManagerLR4k`U", "Program ManagerLR4k(", "Program ManagerLR4kXdN", "Program ManagerLR4k4]L", "Program ManagerLR4k,", "Program ManagerLR4k@;", "Program ManagerLR4kx!I", "Program ManagerLR4k0U?", "Program ManagerLR4k`c", "Program ManagerLR4k|*&", "Program ManagerLR4k8#D", "Program ManagerLR4kl*1", "Program ManagerLR4k .", "Program ManagerLR4kaR", "Program ManagerLR4kL*M", "Program ManagerLR4kp1O", "Program ManagerLR4k@M", "Program ManagerLR4k8e>", "Program ManagerLR4k@", "Program ManagerLR4kt:0", "Program ManagerLR4kD", "Program ManagerLR4kT:L", "Program ManagerLR4kH", "Program ManagerLR4k4~-", "Program ManagerLR4k@`", "Program ManagerLR4kxAN", "Program ManagerLR4kbB", "Program ManagerLR4k A", "Program ManagerLR4kL", "Program ManagerLR4k$~8", "Program ManagerLR4k,+=", "Program ManagerLR4k <", "Program ManagerLR4k0", "Program ManagerLR4k F", "Program ManagerLR4kP2?", "Program ManagerLR4k H", "Program ManagerLR4k4", "Program ManagerLR4k|jE", "Program ManagerLR4k8", "Program ManagerLR4k9", "Program ManagerLR4k P", "Program ManagerLR4k4;<", "Program ManagerLR4kXB>", "Program ManagerLR4k<", "Program ManagerLR4k`sB", "Program ManagerLR4k<K9", "Program ManagerLR4k(#'", "Program ManagerLR4k U\"", "Program Manager", "Program ManagerLR4k0T+", "Program ManagerLR4k T6", "Program ManagerLR4k ^", "Program ManagerLR4k(e!", "Program ManagerLR4kd%", "Program ManagerLR4k|HP", "Program ManagerLR4k8d*", "Program ManagerLR4kD[8", "Program ManagerLR4k g", "Program ManagerLR4kd-", "Program ManagerLR4k(d5", "Program ManagerLR4k\\I@", "Program ManagerLR4kd2", "Program ManagerLR4k@2\"", "Program ManagerLR4k,*)", "Program ManagerLR4kP1+", "Program ManagerLR4kHB!", "Program ManagerLR4kd7", "Program ManagerLR4k4:(", "Program ManagerLR4kPs%", "Program ManagerLR4k@16", "Program ManagerLR4kd88", "Program ManagerLR4kXA*", "Program ManagerLR4kD!", "Program ManagerLR4k@s0", "Program ManagerLR4k`r.", "Program ManagerLR4kdz2", "Program ManagerLR4kHA5", "Program ManagerLR4k|&@", "Program ManagerLR4kdT", "Program ManagerLR4k|h:", "Program ManagerLR4k$9D", "Program ManagerLR4k,jH", "Program ManagerLR4k;S", "Program ManagerLR4kPqJ", "Program ManagerLR4k|q", "Program ManagerLR4kpP%", "Program ManagerLR4k\\W", "Program ManagerLR4k\\H,", "Program ManagerLR4k`P0", "Program ManagerLR4kx`$", "Program ManagerLR4kh`/", "Program ManagerLR4k,HS", "Program ManagerLR4kH`K", "Program ManagerLR4k<J", "Program ManagerLR4k<K", "Program ManagerLR4k4XR", "Program ManagerLR4k Q<", "Program ManagerLR4kLGH", "Program ManagerLR4kpNJ", "Program ManagerLR4kL&C", "Program ManagerLR4k(a;", "Program ManagerLR4kx^I", "Program ManagerLR4k<\\", "Program ManagerLR4kTWG", "Program ManagerLR4kL%S", "Program ManagerLR4k|h", "Program ManagerLR4kLgM", "Program ManagerLR4k$z*", "Program ManagerLR4kpnO", "Program ManagerLR4kT5R", "Program ManagerLR4kt4G", "Program ManagerLR4kTwL", "Program ManagerLR4k<p", "Program ManagerLR4kx~N", "Program ManagerLR4k<z", "Program ManagerLR4ktvA", "Program ManagerLR4k|DF", "Program ManagerLR4kPo?", "Program ManagerLR4k`&", "Program ManagerLR4k4X!", "Program ManagerLR4kL%/", "Program ManagerLR4k P(", "Program ManagerLR4k(`'", "Program ManagerLR4k<%:", "Program ManagerLR4ktTL", "Program ManagerLR4k`3", "Program ManagerLR4kpL?", "Program ManagerLR4k`=", "Program ManagerLR4k@-(", "Program ManagerLR4kx\\>", "Program ManagerLR4k\\E ", "Program ManagerLR4k0-3", "Program ManagerLR4k@#", "Program ManagerLR4k@o\"", "Program ManagerLR4kdv$", "Program ManagerLR4kH='", "Program ManagerLR4kl2S", "Program ManagerLR4kXJ", "Program ManagerLR4kHmK", "Program ManagerLR4kxm", "Program ManagerLR4kxw", "Program ManagerLR4kltM", "Program ManagerLR4kXX", "Program ManagerLR4kh*F", "Program ManagerLR4k89", "Program ManagerLR4k82", "Program ManagerLR4kxr", "Program ManagerLR4kXS", "Program ManagerLR4k8>", "Program ManagerLR4k(N ", "Program ManagerLR4kp:E", "Program ManagerLR4khl@", "Program ManagerLR4kX]", "Program ManagerLR4kp|?", "Program ManagerLR4k8G", "Program ManagerLR4k(n;", "Program ManagerLR4kLu=", "Program ManagerLR4k$$+", "Program ManagerLR4k8P", "Program ManagerLR4kXj", "Program ManagerLR4k0]3", "Program ManagerLR4k8K", "Program ManagerLR4khJK", "Program ManagerLR4k4e.", "Program ManagerLR4klR=", "Program ManagerLR4kHK;", "Program ManagerLR4kXl#", "Program ManagerLR4k8b", "Program ManagerLR4k<3&", "Program ManagerLR4ktb<", "Program ManagerLR4k,31", "Program ManagerLR4k$dJ", "Program ManagerLR4k|4", "Program ManagerLR4k`|\"", "Program ManagerLR4k|0", "Program ManagerLR4kP:3", "Program ManagerLR4k|r9", "Program ManagerLR4k8v", "Program ManagerLR4kXk7", "Program ManagerLR4kLt)", "Program ManagerLR4k:6", "Program ManagerLR4kp{+", "Program ManagerLR4kTB.", "Program ManagerLR4k4C0", "Program ManagerLR4k`{6", "Program ManagerLR4kh(;", "Program ManagerLR4k;\"", "Program ManagerLR4k<t4", "Program ManagerLR4k8{", "Program ManagerLR4kxI#", "Program ManagerLR4k|F", "Program ManagerLR4k\\'", "Program ManagerLR4k<sE", "Program ManagerLR4kDAJ", "Program ManagerLR4kxH7", "Program ManagerLR4k |B", "Program ManagerLR4k4AQ", "Program ManagerLR4klQ)", "Program ManagerLR4kT 0", "Program ManagerLR4k\\Q4", "Program ManagerLR4k4 L", "Program ManagerLR4k\\9", "Program ManagerLR4kta(", "Program ManagerLR4k<QP", "Program ManagerLR4k<$", "Program ManagerLR4k\\>", "Program ManagerLR4k8IC", "Program ManagerLR4k|l", "Program ManagerLR4k\\M", "Program ManagerLR4kTK", "Program ManagerLR4k|/ ", "Program ManagerLR4ktf", "Program ManagerLR4kTG", "Program ManagerLR4k@YB", "Program ManagerLR4kd`D", "Program ManagerLR4k|.4", "Program ManagerLR4kts", "Program ManagerLR4k\\.P", "Program ManagerLR4k41", "Program ManagerLR4k4:", "Program ManagerLR4k$A8", "Program ManagerLR4ktx", "Program ManagerLR4kTY", "Program ManagerLR4k {.", "Program ManagerLR4kd>O", "Program ManagerLR4k4D", "Program ManagerLR4kvG", "Program ManagerLR4kT^", "Program ManagerLR4k4?", "Program ManagerLR4kloS", "Program ManagerLR4kXh=", "Program ManagerLR4k4L", "Program ManagerLR4k</@", "Program ManagerLR4k`6B", "Program ManagerLR4khgF", "Program ManagerLR4k4H", "Program ManagerLR4kw6", "Program ManagerLR4k<q:", "Program ManagerLR4k`x<", "Program ManagerLR4kD??", "Program ManagerLR4k4Q", "Program ManagerLR4kT{", "Program ManagerLR4k0Y%", "Program ManagerLR4k@X.", "Program ManagerLR4k Y0", "Program ManagerLR4kx\"", "Program ManagerLR4k0X9", "Program ManagerLR4k`", "Program ManagerLR4kx0", "Program ManagerLR4k_", "Program ManagerLR4kd", "Program ManagerLR4kh", "Program ManagerLR4k0WJ", "Program ManagerLR4kl", "Program ManagerLR4kP6%", "Program ManagerLR4k4n", "Program ManagerLR4k,/#", "Program ManagerLR4kx5", "Program ManagerLR4kHh ", "Program ManagerLR4kP", "Program ManagerLR4k<.,", "Program ManagerLR4kXg)", "Program ManagerLR4kQ", "Program ManagerLR4k4|", "Program ManagerLR4kT", "Program ManagerLR4kx:", "Program ManagerLR4kXF$", "Program ManagerLR4k`5.", "Program ManagerLR4kX", "Program ManagerLR4kxG", "Program ManagerLR4k<p&", "Program ManagerLR4kHg4", "Program ManagerLR4kP59", "Program ManagerLR4k\\", "Program ManagerLR4kX$", "Program ManagerLR4k`w(", "Program ManagerLR4kD>+", "Program ManagerLR4k(gP", "Program ManagerLR4khE-", "Program ManagerLR4kt~5", "Program ManagerLR4kPw3", "Program ManagerLR4k,-H", "Program ManagerLR4kP4J", "Program ManagerLR4k0wO", "Program ManagerLR4kX-", "Program ManagerLR4k4=G", "Program ManagerLR4kp", "Program ManagerLR4kX?", "Program ManagerLR4kXDI", "Program ManagerLR4kx`", "Program ManagerLR4kt", "Program ManagerLR4kx#$", "Program ManagerLR4kx", "Program ManagerLR4k\\M&", "Program ManagerLR4kpT3", "Program ManagerLR4k|", "Program ManagerLR4kx\"8", "Program ManagerLR4kXD", "Program ManagerLR4kxe", "Program ManagerLR4kLM1", "Program ManagerLR4k8%", "Program ManagerLR4k<^,", "Program ManagerLR4kpg", "Program ManagerLR4kPH", "Program ManagerLR4ktA", "Program ManagerLR4k0.", "Program ManagerLR4k,^7", "Program ManagerLR4kPe9", "Program ManagerLR4kPQ", "Program ManagerLR4kpk", "Program ManagerLR4kPM", "Program ManagerLR4k`\"=", "Program ManagerLR4k07", "Program ManagerLR4kD,$", "Program ManagerLR4kpy", "Program ManagerLR4kT+-", "Program ManagerLR4k,]H", "Program ManagerLR4kL<#", "Program ManagerLR4khu ", "Program ManagerLR4kP_", "Program ManagerLR4k0@", "Program ManagerLR4k84*", "Program ManagerLR4kPZ", "Program ManagerLR4kTm'", "Program ManagerLR4kD+8", "Program ManagerLR4kh2:", "Program ManagerLR4k\\;,", "Program ManagerLR4kpB9", "Program ManagerLR4kDm2", "Program ManagerLR4ks(", "Program ManagerLR4kL;7", "Program ManagerLR4k0E", "Program ManagerLR4k\\}&", "Program ManagerLR4k$mN", "Program ManagerLR4kd$", "Program ManagerLR4k1.", "Program ManagerLR4k(v/", "Program ManagerLR4kL}1", "Program ManagerLR4k(3F", "Program ManagerLR4kL:H", "Program ManagerLR4k,}M", "Program ManagerLR4kPx", "Program ManagerLR4k0R", "Program ManagerLR4k0^", "Program ManagerLR4k0CE", "Program ManagerLR4kt$", "Program ManagerLR4ktJ'", "Program ManagerLR4kdJ2", "Program ManagerLR4k<~", "Program ManagerLR4kDJN"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["mscoree.dll", "apphelp.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "uxtheme.dll", "bcrypt.dll", "cryptsp.dll", "rsaenh.dll", "iphlpapi.dll", "dnsapi.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "winnsi.dll", "mswsock.dll", "rasadhlp.dll", "fwpuclnt.dll", "secur32.dll", "schannel.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["Program ManagerLR4kPn+", "Program ManagerLR4kha", "Program ManagerLR4ktu-", "Program ManagerLR4k8=2", "Program ManagerLR4kdu8", "Program ManagerLR4k@n6", "Program ManagerLR4kH=", "Program ManagerLR4k", "Program ManagerLR4k nR", "Program ManagerLR4khi", "Program ManagerLR4kt2<", "Program ManagerLR4khe", "Program ManagerLR4khn", "Program ManagerLR4k|\" ", "Program ManagerLR4k@mG", "Program ManagerLR4kHO", "Program ManagerLR4k(0", "Program ManagerLR4kHJ", "Program ManagerLR4k`L\"", "Program ManagerLR4kdtI", "Program ManagerLR4k$vD", "Program ManagerLR4k|B;", "Program ManagerLR4kHT", "Program ManagerLR4kH}F", "Program ManagerLR4kpK+", "Program ManagerLR4k`K6", "Program ManagerLR4k(>", "Program ManagerLR4kx[*", "Program ManagerLR4k@KR", "Program ManagerLR4k(G", "Program ManagerLR4kh[5", "Program ManagerLR4kH[Q", "Program ManagerLR4k`JG", "Program ManagerLR4kDSD", "Program ManagerLR4khZF", "Program ManagerLR4k`(R", "Program ManagerLR4k(`", "Program ManagerLR4kLcC", "Program ManagerLR4kHz", "Program ManagerLR4kl+", "Program ManagerLR4kl'", "Program ManagerLR4kh8Q", "Program ManagerLR4kl4", "Program ManagerLR4khzK", "Program ManagerLR4kl0", "Program ManagerLR4k@)B", "Program ManagerLR4kd0D", "Program ManagerLR4k(m", "Program ManagerLR4k(w", "Program ManagerLR4kl@C", "Program ManagerLR4k(r", "Program ManagerLR4k@k<", "Program ManagerLR4klB", "Program ManagerLR4kL#", "Program ManagerLR4k,\"#", "Program ManagerLR4kH{;", "Program ManagerLR4k,!7", "Program ManagerLR4k K.", "Program ManagerLR4k$S2", "Program ManagerLR4k<c&", "Program ManagerLR4kL(", "Program ManagerLR4kl?S", "Program ManagerLR4k,c1", "Program ManagerLR4kL5", "Program ManagerLR4kL0", "Program ManagerLR4kl[", "Program ManagerLR4k`H<", "Program ManagerLR4kD:", "Program ManagerLR4khX;", "Program ManagerLR4k0)%", "Program ManagerLR4kd]", "Program ManagerLR4k@(.", "Program ManagerLR4k )0", "Program ManagerLR4kD02", "Program ManagerLR4kTr!", "Program ManagerLR4k\\@&", "Program ManagerLR4kDC", "Program ManagerLR4k@j(", "Program ManagerLR4kph8", "Program ManagerLR4kdq*", "Program ManagerLR4kL@1", "Program ManagerLR4k$-", "Program ManagerLR4k\\?:", "Program ManagerLR4k0j3", "Program ManagerLR4kTq5", "Program ManagerLR4k0'J", "Program ManagerLR4kDU", "Program ManagerLR4kdo", "Program ManagerLR4kDP", "Program ManagerLR4k87I", "Program ManagerLR4k$6", "Program ManagerLR4ktO!", "Program ManagerLR4k8yC", "Program ManagerLR4k$D", "Program ManagerLR4k<A", "Program ManagerLR4k$@", "Program ManagerLR4k`G(", "Program ManagerLR4ktN5", "Program ManagerLR4k|_ ", "Program ManagerLR4kPG3", "Program ManagerLR4kp%,", "Program ManagerLR4k0GO", "Program ManagerLR4khW'", "Program ManagerLR4k$R", "Program ManagerLR4k|^4", "Program ManagerLR4kDn", "Program ManagerLR4k\\^P", "Program ManagerLR4k8WN", "Program ManagerLR4k$]", "Program ManagerLR4k4OA", "Program ManagerLR4kDw", "Program ManagerLR4kXVC", "Program ManagerLR4kh(", "Program ManagerLR4k`$H", "Program ManagerLR4k$j", "Program ManagerLR4kh1", "Program ManagerLR4k<_@", "Program ManagerLR4k`fB", "Program ManagerLR4k$f", "Program ManagerLR4kh,", "Program ManagerLR4kX4N", "Program ManagerLR4k4-L", "Program ManagerLR4k&1", "Program ManagerLR4k|;P", "Program ManagerLR4k`eR", "Program ManagerLR4k`DM", "Program ManagerLR4kT,A", "Program ManagerLR4k$x", "Program ManagerLR4kx3C", "Program ManagerLR4kH'", "Program ManagerLR4khuQ", "Program ManagerLR4kH\"", "Program ManagerLR4k85>", "Program ManagerLR4k\\<@", "Program ManagerLR4kdmD", "Program ManagerLR4k$O$", "Program ManagerLR4k\\~:", "Program ManagerLR4k4N-", "Program ManagerLR4khW", "Program ManagerLR4kPf%", "Program ManagerLR4k$N8", "Program ManagerLR4k,_#", "Program ManagerLR4kPTO", "Program ManagerLR4k ", "Program ManagerLR4k,MM", "Program ManagerLR4k$", "Program ManagerLR4k4~Q", "Program ManagerLR4kxd2", "Program ManagerLR4k\"", "Program ManagerLR4k`U", "Program ManagerLR4k(", "Program ManagerLR4kXdN", "Program ManagerLR4k4]L", "Program ManagerLR4k,", "Program ManagerLR4k@;", "Program ManagerLR4kx!I", "Program ManagerLR4k0U?", "Program ManagerLR4k`c", "Program ManagerLR4k|*&", "Program ManagerLR4k8#D", "Program ManagerLR4kl*1", "Program ManagerLR4k .", "Program ManagerLR4kaR", "Program ManagerLR4kL*M", "Program ManagerLR4kp1O", "Program ManagerLR4k@M", "Program ManagerLR4k8e>", "Program ManagerLR4k@", "Program ManagerLR4kt:0", "Program ManagerLR4kD", "Program ManagerLR4kT:L", "Program ManagerLR4kH", "Program ManagerLR4k4~-", "Program ManagerLR4k@`", "Program ManagerLR4kxAN", "Program ManagerLR4kbB", "Program ManagerLR4k A", "Program ManagerLR4kL", "Program ManagerLR4k$~8", "Program ManagerLR4k,+=", "Program ManagerLR4k <", "Program ManagerLR4k0", "Program ManagerLR4k F", "Program ManagerLR4kP2?", "Program ManagerLR4k H", "Program ManagerLR4k4", "Program ManagerLR4k|jE", "Program ManagerLR4k8", "Program ManagerLR4k9", "Program ManagerLR4k P", "Program ManagerLR4k4;<", "Program ManagerLR4kXB>", "Program ManagerLR4k<", "Program ManagerLR4k`sB", "Program ManagerLR4k<K9", "Program ManagerLR4k(#'", "Program ManagerLR4k U\"", "Program Manager", "Program ManagerLR4k0T+", "Program ManagerLR4k T6", "Program ManagerLR4k ^", "Program ManagerLR4k(e!", "Program ManagerLR4kd%", "Program ManagerLR4k|HP", "Program ManagerLR4k8d*", "Program ManagerLR4kD[8", "Program ManagerLR4k g", "Program ManagerLR4kd-", "Program ManagerLR4k(d5", "Program ManagerLR4k\\I@", "Program ManagerLR4kd2", "Program ManagerLR4k@2\"", "Program ManagerLR4k,*)", "Program ManagerLR4kP1+", "Program ManagerLR4kHB!", "Program ManagerLR4kd7", "Program ManagerLR4k4:(", "Program ManagerLR4kPs%", "Program ManagerLR4k@16", "Program ManagerLR4kd88", "Program ManagerLR4kXA*", "Program ManagerLR4kD!", "Program ManagerLR4k@s0", "Program ManagerLR4k`r.", "Program ManagerLR4kdz2", "Program ManagerLR4kHA5", "Program ManagerLR4k|&@", "Program ManagerLR4kdT", "Program ManagerLR4k|h:", "Program ManagerLR4k$9D", "Program ManagerLR4k,jH", "Program ManagerLR4k;S", "Program ManagerLR4kPqJ", "Program ManagerLR4k|q", "Program ManagerLR4kpP%", "Program ManagerLR4k\\W", "Program ManagerLR4k\\H,", "Program ManagerLR4k`P0", "Program ManagerLR4kx`$", "Program ManagerLR4kh`/", "Program ManagerLR4k,HS", "Program ManagerLR4kH`K", "Program ManagerLR4k<J", "Program ManagerLR4k<K", "Program ManagerLR4k4XR", "Program ManagerLR4k Q<", "Program ManagerLR4kLGH", "Program ManagerLR4kpNJ", "Program ManagerLR4kL&C", "Program ManagerLR4k(a;", "Program ManagerLR4kx^I", "Program ManagerLR4k<\\", "Program ManagerLR4kTWG", "Program ManagerLR4kL%S", "Program ManagerLR4k|h", "Program ManagerLR4kLgM", "Program ManagerLR4k$z*", "Program ManagerLR4kpnO", "Program ManagerLR4kT5R", "Program ManagerLR4kt4G", "Program ManagerLR4kTwL", "Program ManagerLR4k<p", "Program ManagerLR4kx~N", "Program ManagerLR4k<z", "Program ManagerLR4ktvA", "Program ManagerLR4k|DF", "Program ManagerLR4kPo?", "Program ManagerLR4k`&", "Program ManagerLR4k4X!", "Program ManagerLR4kL%/", "Program ManagerLR4k P(", "Program ManagerLR4k(`'", "Program ManagerLR4k<%:", "Program ManagerLR4ktTL", "Program ManagerLR4k`3", "Program ManagerLR4kpL?", "Program ManagerLR4k`=", "Program ManagerLR4k@-(", "Program ManagerLR4kx\\>", "Program ManagerLR4k\\E ", "Program ManagerLR4k0-3", "Program ManagerLR4k@#", "Program ManagerLR4k@o\"", "Program ManagerLR4kdv$", "Program ManagerLR4kH='", "Program ManagerLR4kl2S", "Program ManagerLR4kXJ", "Program ManagerLR4kHmK", "Program ManagerLR4kxm", "Program ManagerLR4kxw", "Program ManagerLR4kltM", "Program ManagerLR4kXX", "Program ManagerLR4kh*F", "Program ManagerLR4k89", "Program ManagerLR4k82", "Program ManagerLR4kxr", "Program ManagerLR4kXS", "Program ManagerLR4k8>", "Program ManagerLR4k(N ", "Program ManagerLR4kp:E", "Program ManagerLR4khl@", "Program ManagerLR4kX]", "Program ManagerLR4kp|?", "Program ManagerLR4k8G", "Program ManagerLR4k(n;", "Program ManagerLR4kLu=", "Program ManagerLR4k$$+", "Program ManagerLR4k8P", "Program ManagerLR4kXj", "Program ManagerLR4k0]3", "Program ManagerLR4k8K", "Program ManagerLR4khJK", "Program ManagerLR4k4e.", "Program ManagerLR4klR=", "Program ManagerLR4kHK;", "Program ManagerLR4kXl#", "Program ManagerLR4k8b", "Program ManagerLR4k<3&", "Program ManagerLR4ktb<", "Program ManagerLR4k,31", "Program ManagerLR4k$dJ", "Program ManagerLR4k|4", "Program ManagerLR4k`|\"", "Program ManagerLR4k|0", "Program ManagerLR4kP:3", "Program ManagerLR4k|r9", "Program ManagerLR4k8v", "Program ManagerLR4kXk7", "Program ManagerLR4kLt)", "Program ManagerLR4k:6", "Program ManagerLR4kp{+", "Program ManagerLR4kTB.", "Program ManagerLR4k4C0", "Program ManagerLR4k`{6", "Program ManagerLR4kh(;", "Program ManagerLR4k;\"", "Program ManagerLR4k<t4", "Program ManagerLR4k8{", "Program ManagerLR4kxI#", "Program ManagerLR4k|F", "Program ManagerLR4k\\'", "Program ManagerLR4k<sE", "Program ManagerLR4kDAJ", "Program ManagerLR4kxH7", "Program ManagerLR4k |B", "Program ManagerLR4k4AQ", "Program ManagerLR4klQ)", "Program ManagerLR4kT 0", "Program ManagerLR4k\\Q4", "Program ManagerLR4k4 L", "Program ManagerLR4k\\9", "Program ManagerLR4kta(", "Program ManagerLR4k<QP", "Program ManagerLR4k<$", "Program ManagerLR4k\\>", "Program ManagerLR4k8IC", "Program ManagerLR4k|l", "Program ManagerLR4k\\M", "Program ManagerLR4kTK", "Program ManagerLR4k|/ ", "Program ManagerLR4ktf", "Program ManagerLR4kTG", "Program ManagerLR4k@YB", "Program ManagerLR4kd`D", "Program ManagerLR4k|.4", "Program ManagerLR4kts", "Program ManagerLR4k\\.P", "Program ManagerLR4k41", "Program ManagerLR4k4:", "Program ManagerLR4k$A8", "Program ManagerLR4ktx", "Program ManagerLR4kTY", "Program ManagerLR4k {.", "Program ManagerLR4kd>O", "Program ManagerLR4k4D", "Program ManagerLR4kvG", "Program ManagerLR4kT^", "Program ManagerLR4k4?", "Program ManagerLR4kloS", "Program ManagerLR4kXh=", "Program ManagerLR4k4L", "Program ManagerLR4k</@", "Program ManagerLR4k`6B", "Program ManagerLR4khgF", "Program ManagerLR4k4H", "Program ManagerLR4kw6", "Program ManagerLR4k<q:", "Program ManagerLR4k`x<", "Program ManagerLR4kD??", "Program ManagerLR4k4Q", "Program ManagerLR4kT{", "Program ManagerLR4k0Y%", "Program ManagerLR4k@X.", "Program ManagerLR4k Y0", "Program ManagerLR4kx\"", "Program ManagerLR4k0X9", "Program ManagerLR4k`", "Program ManagerLR4kx0", "Program ManagerLR4k_", "Program ManagerLR4kd", "Program ManagerLR4kh", "Program ManagerLR4k0WJ", "Program ManagerLR4kl", "Program ManagerLR4kP6%", "Program ManagerLR4k4n", "Program ManagerLR4k,/#", "Program ManagerLR4kx5", "Program ManagerLR4kHh ", "Program ManagerLR4kP", "Program ManagerLR4k<.,", "Program ManagerLR4kXg)", "Program ManagerLR4kQ", "Program ManagerLR4k4|", "Program ManagerLR4kT", "Program ManagerLR4kx:", "Program ManagerLR4kXF$", "Program ManagerLR4k`5.", "Program ManagerLR4kX", "Program ManagerLR4kxG", "Program ManagerLR4k<p&", "Program ManagerLR4kHg4", "Program ManagerLR4kP59", "Program ManagerLR4k\\", "Program ManagerLR4kX$", "Program ManagerLR4k`w(", "Program ManagerLR4kD>+", "Program ManagerLR4k(gP", "Program ManagerLR4khE-", "Program ManagerLR4kt~5", "Program ManagerLR4kPw3", "Program ManagerLR4k,-H", "Program ManagerLR4kP4J", "Program ManagerLR4k0wO", "Program ManagerLR4kX-", "Program ManagerLR4k4=G", "Program ManagerLR4kp", "Program ManagerLR4kX?", "Program ManagerLR4kXDI", "Program ManagerLR4kx`", "Program ManagerLR4kt", "Program ManagerLR4kx#$", "Program ManagerLR4kx", "Program ManagerLR4k\\M&", "Program ManagerLR4kpT3", "Program ManagerLR4k|", "Program ManagerLR4kx\"8", "Program ManagerLR4kXD", "Program ManagerLR4kxe", "Program ManagerLR4kLM1", "Program ManagerLR4k8%", "Program ManagerLR4k<^,", "Program ManagerLR4kpg", "Program ManagerLR4kPH", "Program ManagerLR4ktA", "Program ManagerLR4k0.", "Program ManagerLR4k,^7", "Program ManagerLR4kPe9", "Program ManagerLR4kPQ", "Program ManagerLR4kpk", "Program ManagerLR4kPM", "Program ManagerLR4k`\"=", "Program ManagerLR4k07", "Program ManagerLR4kD,$", "Program ManagerLR4kpy", "Program ManagerLR4kT+-", "Program ManagerLR4k,]H", "Program ManagerLR4kL<#", "Program ManagerLR4khu ", "Program ManagerLR4kP_", "Program ManagerLR4k0@", "Program ManagerLR4k84*", "Program ManagerLR4kPZ", "Program ManagerLR4kTm'", "Program ManagerLR4kD+8", "Program ManagerLR4kh2:", "Program ManagerLR4k\\;,", "Program ManagerLR4kpB9", "Program ManagerLR4kDm2", "Program ManagerLR4ks(", "Program ManagerLR4kL;7", "Program ManagerLR4k0E", "Program ManagerLR4k\\}&", "Program ManagerLR4k$mN", "Program ManagerLR4kd$", "Program ManagerLR4k1.", "Program ManagerLR4k(v/", "Program ManagerLR4kL}1", "Program ManagerLR4k(3F", "Program ManagerLR4kL:H", "Program ManagerLR4k,}M", "Program ManagerLR4kPx", "Program ManagerLR4k0R", "Program ManagerLR4k0^", "Program ManagerLR4k0CE", "Program ManagerLR4kt$", "Program ManagerLR4ktJ'", "Program ManagerLR4kdJ2", "Program ManagerLR4k<~", "Program ManagerLR4kDJN"]}]}, {"id": "T1562", "name": "Impair Defenses", "link": "https://attack.mitre.org/techniques/T1562/", "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents."}, {"id": "T1562.001", "name": "Disable or Modify Tools", "link": "https://attack.mitre.org/techniques/T1562/001/", "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Alternatively, they may add new directories to an endpoint detection and response (EDR) tool\u2019s exclusion list, enabling them to hide malicious files via File/Path Exclusions.\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.", "signatures": [{"severity": "INFO", "description": "Creates guard pages, often used to prevent reverse engineering and debugging", "match_data": ["page read and write | page guard"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["-5534023222112862s >= -30000s", "-59890s >= -30000s", "14C0000 memory reserve | memory write watch", "3010000 memory reserve | memory write watch", "5010000 memory reserve | memory write watch", "delay time: 922337203685477", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Allocates memory with a write watch (potentially for evading sandboxes)", "match_data": ["-5534023222112862s >= -30000s", "-59890s >= -30000s", "14C0000 memory reserve | memory write watch", "3010000 memory reserve | memory write watch", "5010000 memory reserve | memory write watch", "delay time: 922337203685477", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["-5534023222112862s >= -30000s", "-59890s >= -30000s", "14C0000 memory reserve | memory write watch", "3010000 memory reserve | memory write watch", "5010000 memory reserve | memory write watch", "delay time: 922337203685477", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["-5534023222112862s >= -30000s", "-59890s >= -30000s", "14C0000 memory reserve | memory write watch", "3010000 memory reserve | memory write watch", "5010000 memory reserve | memory write watch", "delay time: 922337203685477", "delay time: 922337203685477"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["-5534023222112862s >= -30000s", "-59890s >= -30000s", "14C0000 memory reserve | memory write watch", "3010000 memory reserve | memory write watch", "5010000 memory reserve | memory write watch", "delay time: 922337203685477", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Allocates memory with a write watch (potentially for evading sandboxes)", "match_data": ["-5534023222112862s >= -30000s", "-59890s >= -30000s", "14C0000 memory reserve | memory write watch", "3010000 memory reserve | memory write watch", "5010000 memory reserve | memory write watch", "delay time: 922337203685477", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["-5534023222112862s >= -30000s", "-59890s >= -30000s", "14C0000 memory reserve | memory write watch", "3010000 memory reserve | memory write watch", "5010000 memory reserve | memory write watch", "delay time: 922337203685477", "delay time: 922337203685477"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["-5534023222112862s >= -30000s", "-59890s >= -30000s", "14C0000 memory reserve | memory write watch", "3010000 memory reserve | memory write watch", "5010000 memory reserve | memory write watch", "delay time: 922337203685477", "delay time: 922337203685477"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll"]}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["Program ManagerLR4kPn+", "Program ManagerLR4kha", "Program ManagerLR4ktu-", "Program ManagerLR4k8=2", "Program ManagerLR4kdu8", "Program ManagerLR4k@n6", "Program ManagerLR4kH=", "Program ManagerLR4k", "Program ManagerLR4k nR", "Program ManagerLR4khi", "Program ManagerLR4kt2<", "Program ManagerLR4khe", "Program ManagerLR4khn", "Program ManagerLR4k|\" ", "Program ManagerLR4k@mG", "Program ManagerLR4kHO", "Program ManagerLR4k(0", "Program ManagerLR4kHJ", "Program ManagerLR4k`L\"", "Program ManagerLR4kdtI", "Program ManagerLR4k$vD", "Program ManagerLR4k|B;", "Program ManagerLR4kHT", "Program ManagerLR4kH}F", "Program ManagerLR4kpK+", "Program ManagerLR4k`K6", "Program ManagerLR4k(>", "Program ManagerLR4kx[*", "Program ManagerLR4k@KR", "Program ManagerLR4k(G", "Program ManagerLR4kh[5", "Program ManagerLR4kH[Q", "Program ManagerLR4k`JG", "Program ManagerLR4kDSD", "Program ManagerLR4khZF", "Program ManagerLR4k`(R", "Program ManagerLR4k(`", "Program ManagerLR4kLcC", "Program ManagerLR4kHz", "Program ManagerLR4kl+", "Program ManagerLR4kl'", "Program ManagerLR4kh8Q", "Program ManagerLR4kl4", "Program ManagerLR4khzK", "Program ManagerLR4kl0", "Program ManagerLR4k@)B", "Program ManagerLR4kd0D", "Program ManagerLR4k(m", "Program ManagerLR4k(w", "Program ManagerLR4kl@C", "Program ManagerLR4k(r", "Program ManagerLR4k@k<", "Program ManagerLR4klB", "Program ManagerLR4kL#", "Program ManagerLR4k,\"#", "Program ManagerLR4kH{;", "Program ManagerLR4k,!7", "Program ManagerLR4k K.", "Program ManagerLR4k$S2", "Program ManagerLR4k<c&", "Program ManagerLR4kL(", "Program ManagerLR4kl?S", "Program ManagerLR4k,c1", "Program ManagerLR4kL5", "Program ManagerLR4kL0", "Program ManagerLR4kl[", "Program ManagerLR4k`H<", "Program ManagerLR4kD:", "Program ManagerLR4khX;", "Program ManagerLR4k0)%", "Program ManagerLR4kd]", "Program ManagerLR4k@(.", "Program ManagerLR4k )0", "Program ManagerLR4kD02", "Program ManagerLR4kTr!", "Program ManagerLR4k\\@&", "Program ManagerLR4kDC", "Program ManagerLR4k@j(", "Program ManagerLR4kph8", "Program ManagerLR4kdq*", "Program ManagerLR4kL@1", "Program ManagerLR4k$-", "Program ManagerLR4k\\?:", "Program ManagerLR4k0j3", "Program ManagerLR4kTq5", "Program ManagerLR4k0'J", "Program ManagerLR4kDU", "Program ManagerLR4kdo", "Program ManagerLR4kDP", "Program ManagerLR4k87I", "Program ManagerLR4k$6", "Program ManagerLR4ktO!", "Program ManagerLR4k8yC", "Program ManagerLR4k$D", "Program ManagerLR4k<A", "Program ManagerLR4k$@", "Program ManagerLR4k`G(", "Program ManagerLR4ktN5", "Program ManagerLR4k|_ ", "Program ManagerLR4kPG3", "Program ManagerLR4kp%,", "Program ManagerLR4k0GO", "Program ManagerLR4khW'", "Program ManagerLR4k$R", "Program ManagerLR4k|^4", "Program ManagerLR4kDn", "Program ManagerLR4k\\^P", "Program ManagerLR4k8WN", "Program ManagerLR4k$]", "Program ManagerLR4k4OA", "Program ManagerLR4kDw", "Program ManagerLR4kXVC", "Program ManagerLR4kh(", "Program ManagerLR4k`$H", "Program ManagerLR4k$j", "Program ManagerLR4kh1", "Program ManagerLR4k<_@", "Program ManagerLR4k`fB", "Program ManagerLR4k$f", "Program ManagerLR4kh,", "Program ManagerLR4kX4N", "Program ManagerLR4k4-L", "Program ManagerLR4k&1", "Program ManagerLR4k|;P", "Program ManagerLR4k`eR", "Program ManagerLR4k`DM", "Program ManagerLR4kT,A", "Program ManagerLR4k$x", "Program ManagerLR4kx3C", "Program ManagerLR4kH'", "Program ManagerLR4khuQ", "Program ManagerLR4kH\"", "Program ManagerLR4k85>", "Program ManagerLR4k\\<@", "Program ManagerLR4kdmD", "Program ManagerLR4k$O$", "Program ManagerLR4k\\~:", "Program ManagerLR4k4N-", "Program ManagerLR4khW", "Program ManagerLR4kPf%", "Program ManagerLR4k$N8", "Program ManagerLR4k,_#", "Program ManagerLR4kPTO", "Program ManagerLR4k ", "Program ManagerLR4k,MM", "Program ManagerLR4k$", "Program ManagerLR4k4~Q", "Program ManagerLR4kxd2", "Program ManagerLR4k\"", "Program ManagerLR4k`U", "Program ManagerLR4k(", "Program ManagerLR4kXdN", "Program ManagerLR4k4]L", "Program ManagerLR4k,", "Program ManagerLR4k@;", "Program ManagerLR4kx!I", "Program ManagerLR4k0U?", "Program ManagerLR4k`c", "Program ManagerLR4k|*&", "Program ManagerLR4k8#D", "Program ManagerLR4kl*1", "Program ManagerLR4k .", "Program ManagerLR4kaR", "Program ManagerLR4kL*M", "Program ManagerLR4kp1O", "Program ManagerLR4k@M", "Program ManagerLR4k8e>", "Program ManagerLR4k@", "Program ManagerLR4kt:0", "Program ManagerLR4kD", "Program ManagerLR4kT:L", "Program ManagerLR4kH", "Program ManagerLR4k4~-", "Program ManagerLR4k@`", "Program ManagerLR4kxAN", "Program ManagerLR4kbB", "Program ManagerLR4k A", "Program ManagerLR4kL", "Program ManagerLR4k$~8", "Program ManagerLR4k,+=", "Program ManagerLR4k <", "Program ManagerLR4k0", "Program ManagerLR4k F", "Program ManagerLR4kP2?", "Program ManagerLR4k H", "Program ManagerLR4k4", "Program ManagerLR4k|jE", "Program ManagerLR4k8", "Program ManagerLR4k9", "Program ManagerLR4k P", "Program ManagerLR4k4;<", "Program ManagerLR4kXB>", "Program ManagerLR4k<", "Program ManagerLR4k`sB", "Program ManagerLR4k<K9", "Program ManagerLR4k(#'", "Program ManagerLR4k U\"", "Program Manager", "Program ManagerLR4k0T+", "Program ManagerLR4k T6", "Program ManagerLR4k ^", "Program ManagerLR4k(e!", "Program ManagerLR4kd%", "Program ManagerLR4k|HP", "Program ManagerLR4k8d*", "Program ManagerLR4kD[8", "Program ManagerLR4k g", "Program ManagerLR4kd-", "Program ManagerLR4k(d5", "Program ManagerLR4k\\I@", "Program ManagerLR4kd2", "Program ManagerLR4k@2\"", "Program ManagerLR4k,*)", "Program ManagerLR4kP1+", "Program ManagerLR4kHB!", "Program ManagerLR4kd7", "Program ManagerLR4k4:(", "Program ManagerLR4kPs%", "Program ManagerLR4k@16", "Program ManagerLR4kd88", "Program ManagerLR4kXA*", "Program ManagerLR4kD!", "Program ManagerLR4k@s0", "Program ManagerLR4k`r.", "Program ManagerLR4kdz2", "Program ManagerLR4kHA5", "Program ManagerLR4k|&@", "Program ManagerLR4kdT", "Program ManagerLR4k|h:", "Program ManagerLR4k$9D", "Program ManagerLR4k,jH", "Program ManagerLR4k;S", "Program ManagerLR4kPqJ", "Program ManagerLR4k|q", "Program ManagerLR4kpP%", "Program ManagerLR4k\\W", "Program ManagerLR4k\\H,", "Program ManagerLR4k`P0", "Program ManagerLR4kx`$", "Program ManagerLR4kh`/", "Program ManagerLR4k,HS", "Program ManagerLR4kH`K", "Program ManagerLR4k<J", "Program ManagerLR4k<K", "Program ManagerLR4k4XR", "Program ManagerLR4k Q<", "Program ManagerLR4kLGH", "Program ManagerLR4kpNJ", "Program ManagerLR4kL&C", "Program ManagerLR4k(a;", "Program ManagerLR4kx^I", "Program ManagerLR4k<\\", "Program ManagerLR4kTWG", "Program ManagerLR4kL%S", "Program ManagerLR4k|h", "Program ManagerLR4kLgM", "Program ManagerLR4k$z*", "Program ManagerLR4kpnO", "Program ManagerLR4kT5R", "Program ManagerLR4kt4G", "Program ManagerLR4kTwL", "Program ManagerLR4k<p", "Program ManagerLR4kx~N", "Program ManagerLR4k<z", "Program ManagerLR4ktvA", "Program ManagerLR4k|DF", "Program ManagerLR4kPo?", "Program ManagerLR4k`&", "Program ManagerLR4k4X!", "Program ManagerLR4kL%/", "Program ManagerLR4k P(", "Program ManagerLR4k(`'", "Program ManagerLR4k<%:", "Program ManagerLR4ktTL", "Program ManagerLR4k`3", "Program ManagerLR4kpL?", "Program ManagerLR4k`=", "Program ManagerLR4k@-(", "Program ManagerLR4kx\\>", "Program ManagerLR4k\\E ", "Program ManagerLR4k0-3", "Program ManagerLR4k@#", "Program ManagerLR4k@o\"", "Program ManagerLR4kdv$", "Program ManagerLR4kH='", "Program ManagerLR4kl2S", "Program ManagerLR4kXJ", "Program ManagerLR4kHmK", "Program ManagerLR4kxm", "Program ManagerLR4kxw", "Program ManagerLR4kltM", "Program ManagerLR4kXX", "Program ManagerLR4kh*F", "Program ManagerLR4k89", "Program ManagerLR4k82", "Program ManagerLR4kxr", "Program ManagerLR4kXS", "Program ManagerLR4k8>", "Program ManagerLR4k(N ", "Program ManagerLR4kp:E", "Program ManagerLR4khl@", "Program ManagerLR4kX]", "Program ManagerLR4kp|?", "Program ManagerLR4k8G", "Program ManagerLR4k(n;", "Program ManagerLR4kLu=", "Program ManagerLR4k$$+", "Program ManagerLR4k8P", "Program ManagerLR4kXj", "Program ManagerLR4k0]3", "Program ManagerLR4k8K", "Program ManagerLR4khJK", "Program ManagerLR4k4e.", "Program ManagerLR4klR=", "Program ManagerLR4kHK;", "Program ManagerLR4kXl#", "Program ManagerLR4k8b", "Program ManagerLR4k<3&", "Program ManagerLR4ktb<", "Program ManagerLR4k,31", "Program ManagerLR4k$dJ", "Program ManagerLR4k|4", "Program ManagerLR4k`|\"", "Program ManagerLR4k|0", "Program ManagerLR4kP:3", "Program ManagerLR4k|r9", "Program ManagerLR4k8v", "Program ManagerLR4kXk7", "Program ManagerLR4kLt)", "Program ManagerLR4k:6", "Program ManagerLR4kp{+", "Program ManagerLR4kTB.", "Program ManagerLR4k4C0", "Program ManagerLR4k`{6", "Program ManagerLR4kh(;", "Program ManagerLR4k;\"", "Program ManagerLR4k<t4", "Program ManagerLR4k8{", "Program ManagerLR4kxI#", "Program ManagerLR4k|F", "Program ManagerLR4k\\'", "Program ManagerLR4k<sE", "Program ManagerLR4kDAJ", "Program ManagerLR4kxH7", "Program ManagerLR4k |B", "Program ManagerLR4k4AQ", "Program ManagerLR4klQ)", "Program ManagerLR4kT 0", "Program ManagerLR4k\\Q4", "Program ManagerLR4k4 L", "Program ManagerLR4k\\9", "Program ManagerLR4kta(", "Program ManagerLR4k<QP", "Program ManagerLR4k<$", "Program ManagerLR4k\\>", "Program ManagerLR4k8IC", "Program ManagerLR4k|l", "Program ManagerLR4k\\M", "Program ManagerLR4kTK", "Program ManagerLR4k|/ ", "Program ManagerLR4ktf", "Program ManagerLR4kTG", "Program ManagerLR4k@YB", "Program ManagerLR4kd`D", "Program ManagerLR4k|.4", "Program ManagerLR4kts", "Program ManagerLR4k\\.P", "Program ManagerLR4k41", "Program ManagerLR4k4:", "Program ManagerLR4k$A8", "Program ManagerLR4ktx", "Program ManagerLR4kTY", "Program ManagerLR4k {.", "Program ManagerLR4kd>O", "Program ManagerLR4k4D", "Program ManagerLR4kvG", "Program ManagerLR4kT^", "Program ManagerLR4k4?", "Program ManagerLR4kloS", "Program ManagerLR4kXh=", "Program ManagerLR4k4L", "Program ManagerLR4k</@", "Program ManagerLR4k`6B", "Program ManagerLR4khgF", "Program ManagerLR4k4H", "Program ManagerLR4kw6", "Program ManagerLR4k<q:", "Program ManagerLR4k`x<", "Program ManagerLR4kD??", "Program ManagerLR4k4Q", "Program ManagerLR4kT{", "Program ManagerLR4k0Y%", "Program ManagerLR4k@X.", "Program ManagerLR4k Y0", "Program ManagerLR4kx\"", "Program ManagerLR4k0X9", "Program ManagerLR4k`", "Program ManagerLR4kx0", "Program ManagerLR4k_", "Program ManagerLR4kd", "Program ManagerLR4kh", "Program ManagerLR4k0WJ", "Program ManagerLR4kl", "Program ManagerLR4kP6%", "Program ManagerLR4k4n", "Program ManagerLR4k,/#", "Program ManagerLR4kx5", "Program ManagerLR4kHh ", "Program ManagerLR4kP", "Program ManagerLR4k<.,", "Program ManagerLR4kXg)", "Program ManagerLR4kQ", "Program ManagerLR4k4|", "Program ManagerLR4kT", "Program ManagerLR4kx:", "Program ManagerLR4kXF$", "Program ManagerLR4k`5.", "Program ManagerLR4kX", "Program ManagerLR4kxG", "Program ManagerLR4k<p&", "Program ManagerLR4kHg4", "Program ManagerLR4kP59", "Program ManagerLR4k\\", "Program ManagerLR4kX$", "Program ManagerLR4k`w(", "Program ManagerLR4kD>+", "Program ManagerLR4k(gP", "Program ManagerLR4khE-", "Program ManagerLR4kt~5", "Program ManagerLR4kPw3", "Program ManagerLR4k,-H", "Program ManagerLR4kP4J", "Program ManagerLR4k0wO", "Program ManagerLR4kX-", "Program ManagerLR4k4=G", "Program ManagerLR4kp", "Program ManagerLR4kX?", "Program ManagerLR4kXDI", "Program ManagerLR4kx`", "Program ManagerLR4kt", "Program ManagerLR4kx#$", "Program ManagerLR4kx", "Program ManagerLR4k\\M&", "Program ManagerLR4kpT3", "Program ManagerLR4k|", "Program ManagerLR4kx\"8", "Program ManagerLR4kXD", "Program ManagerLR4kxe", "Program ManagerLR4kLM1", "Program ManagerLR4k8%", "Program ManagerLR4k<^,", "Program ManagerLR4kpg", "Program ManagerLR4kPH", "Program ManagerLR4ktA", "Program ManagerLR4k0.", "Program ManagerLR4k,^7", "Program ManagerLR4kPe9", "Program ManagerLR4kPQ", "Program ManagerLR4kpk", "Program ManagerLR4kPM", "Program ManagerLR4k`\"=", "Program ManagerLR4k07", "Program ManagerLR4kD,$", "Program ManagerLR4kpy", "Program ManagerLR4kT+-", "Program ManagerLR4k,]H", "Program ManagerLR4kL<#", "Program ManagerLR4khu ", "Program ManagerLR4kP_", "Program ManagerLR4k0@", "Program ManagerLR4k84*", "Program ManagerLR4kPZ", "Program ManagerLR4kTm'", "Program ManagerLR4kD+8", "Program ManagerLR4kh2:", "Program ManagerLR4k\\;,", "Program ManagerLR4kpB9", "Program ManagerLR4kDm2", "Program ManagerLR4ks(", "Program ManagerLR4kL;7", "Program ManagerLR4k0E", "Program ManagerLR4k\\}&", "Program ManagerLR4k$mN", "Program ManagerLR4kd$", "Program ManagerLR4k1.", "Program ManagerLR4k(v/", "Program ManagerLR4kL}1", "Program ManagerLR4k(3F", "Program ManagerLR4kL:H", "Program ManagerLR4k,}M", "Program ManagerLR4kPx", "Program ManagerLR4k0R", "Program ManagerLR4k0^", "Program ManagerLR4k0CE", "Program ManagerLR4kt$", "Program ManagerLR4ktJ'", "Program ManagerLR4kdJ2", "Program ManagerLR4k<~", "Program ManagerLR4kDJN"]}]}, {"id": "T1010", "name": "Application Window Discovery", "link": "https://attack.mitre.org/techniques/T1010/", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "signatures": [{"severity": "INFO", "description": "Sample monitors Window changes (e.g. starting applications), analyze the sample with the simulation cookbook"}]}, {"id": "T1018", "name": "Remote System Discovery", "link": "https://attack.mitre.org/techniques/T1018/", "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping, net view using Net, or, on ESXi servers, esxcli network diag ping.\nAdversaries may also analyze data from local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment.\nAdversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. show cdp neighbors, show arp).  ", "signatures": [{"severity": "INFO", "description": "Reads the hosts file", "match_data": ["C:\\Windows\\System32\\drivers\\etc\\hosts"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["C:\\Users\\user\\Desktop\\invoice222.exe VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["C:\\Users\\user\\Desktop\\invoice222.exe VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["C:\\Users\\user\\Desktop\\invoice222.exe VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "INFO", "description": "Creates a DirectInput object (often for capturing keystrokes)", "match_data": ["      <HOOK MODULE=\"DDRAW.DLL\" FUNCTION=\"DirectDrawCreateEx\"/>"]}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "INFO", "description": "Creates a DirectInput object (often for capturing keystrokes)", "match_data": ["      <HOOK MODULE=\"DDRAW.DLL\" FUNCTION=\"DirectDrawCreateEx\"/>"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1571", "name": "Non-Standard Port", "link": "https://attack.mitre.org/techniques/T1571/", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.", "signatures": [{"severity": "INFO", "description": "Detected TCP or UDP traffic on non-standard ports", "match_data": ["192.168.2.9:49726 -> 51.68.176.163:587"]}]}, {"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: mail.notok.top"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: mail.notok.top", "192.168.2.9:49726 -> 51.68.176.163:587"]}, {"severity": "INFO", "description": "Uses SMTP (mail sending)", "match_data": ["DNS query: mail.notok.top", "192.168.2.9:49726 -> 51.68.176.163:587"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/a18753fa376cbb4f7964fe6a3427912a4f32ce49b51fecb7fc2df686cab46175/behaviour_mitre_trees"}}