{"data": {"CAPA": {"tactics": [{"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "check if file exists"}, {"severity": "INFO", "description": "get common file path"}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "query environment variable"}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "enumerate process modules"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "encode data using XOR"}, {"severity": "INFO", "description": "encrypt data using RC4 PRGA"}, {"severity": "INFO", "description": "encode data using Base64"}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "INFO", "description": "parse PE header"}, {"severity": "INFO", "description": "link many functions at runtime"}, {"severity": "INFO", "description": "link function at runtime on Windows"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1014", "name": "Rootkit", "link": "https://attack.mitre.org/techniques/T1014/", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  \nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components."}]}, {"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system."}]}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}, {"id": "T1564", "name": "Hide Artifacts", "link": "https://attack.mitre.org/techniques/T1564/", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection."}]}, {"id": "T1202", "name": "Indirect Command Execution", "link": "https://attack.mitre.org/techniques/T1202/", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), Scriptrunner.exe, as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts. Adversaries may also abuse the ssh.exe binary to execute malicious commands via the ProxyCommand and LocalCommand options, which can be invoked via the -o flag or by modifying the SSH config file.\nAdversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters."}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution."}]}, {"id": "T1070", "name": "Indicator Removal", "link": "https://attack.mitre.org/techniques/T1070/", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses."}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code."}]}, {"id": "T1564.001", "name": "Hidden Files and Directories", "link": "https://attack.mitre.org/techniques/T1564/001/", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms."}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system."}]}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution."}]}, {"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."}]}, {"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."}]}, {"id": "T1547.001", "name": "Registry Run Keys / Startup Folder", "link": "https://attack.mitre.org/techniques/T1547/001/", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1547", "name": "Boot or Logon Autostart Execution", "link": "https://attack.mitre.org/techniques/T1547/", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems."}]}, {"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."}]}, {"id": "T1547.001", "name": "Registry Run Keys / Startup Folder", "link": "https://attack.mitre.org/techniques/T1547/001/", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level.\nThe following run keys are created by default on Windows systems:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nRun keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" \nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp.\nThe following Registry keys can be used to set startup folder items for persistence:\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\n\nThe following Registry keys can control automatic startup of services during boot:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\n\nPrograms listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user.\nBy default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key."}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1539", "name": "Steal Web Session Cookie", "link": "https://attack.mitre.org/techniques/T1539/", "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.\nThere are several examples of malware targeting cookies from web browsers on the local system. Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on User Execution by tricking victims into running malicious JavaScript in their browser.\nThere are also open source frameworks such as Evilginx2 and Muraena that can gather session cookies through a malicious proxy (e.g., Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns.\nAfter an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials."}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code."}]}, {"id": "T1106", "name": "Native API", "link": "https://attack.mitre.org/techniques/T1106/", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0040", "name": "Impact", "link": "https://attack.mitre.org/tactics/TA0040/", "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.", "techniques": [{"id": "T1496", "name": "Resource Hijacking", "link": "https://attack.mitre.org/techniques/T1496/", "description": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. \nResource hijacking may take a number of different forms. For example, adversaries may:\n\nLeverage compute resources in order to mine cryptocurrency\nSell network bandwidth to proxy networks\nGenerate SMS traffic for profit\nAbuse cloud-based messaging services to send large quantities of spam messages\n\nIn some cases, adversaries may leverage multiple types of Resource Hijacking at once.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability."}]}, {"id": "T1485", "name": "Data Destruction", "link": "https://attack.mitre.org/techniques/T1485/", "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares..\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers. Similarly, they may delete virtual machines from on-prem virtualized environments.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources."}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0001", "name": "Initial Access", "link": "https://attack.mitre.org/tactics/TA0001/", "description": "The adversary is trying to get into your network.\n\nInitial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.", "techniques": [{"id": "T1091", "name": "Replication Through Removable Media", "link": "https://attack.mitre.org/techniques/T1091/", "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\nMobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).", "signatures": [{"severity": "INFO", "description": "Checks for available system drives (often done to infect USB drives)", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "a:"]}]}]}, {"id": "TA0008", "name": "Lateral Movement", "link": "https://attack.mitre.org/tactics/TA0008/", "description": "The adversary is trying to move through your environment.\n\nLateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier. ", "techniques": [{"id": "T1091", "name": "Replication Through Removable Media", "link": "https://attack.mitre.org/techniques/T1091/", "description": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.\nMobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled).", "signatures": [{"severity": "INFO", "description": "Checks for available system drives (often done to infect USB drives)", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "a:"]}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1047", "name": "Windows Management Instrumentation", "link": "https://attack.mitre.org/techniques/T1047/", "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, wmic.exe can be abused by an adversary to delete shadow copies with the command wmic.exe Shadowcopy Delete (i.e., Inhibit System Recovery).\nNote: wmic.exe is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like wbemtool.exe, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.", "signatures": [{"severity": "INFO", "description": "Queries sensitive processor information (via WMI, Win32_Processor, often done to detect virtual machines)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor"]}, {"severity": "LOW", "description": "Queries BIOS Information (via WMI, Win32_Bios)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor"]}, {"severity": "INFO", "description": "Queries process information (via WMI, Win32_Process)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor"]}]}, {"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "INFO", "description": "Very long cmdline option found, this is very uncommon (may be encrypted or packed)", "match_data": ["C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.ClientService.exe \"c:\\program files (x86)\\screenconnect client (bb705c8691efbc93)\\screenconnect.clientservice.exe\" \"?e=acce"]}]}, {"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "INFO", "description": ".NET source code contains functionality to register a task", "match_data": ["'CreateDefaultDropDown'"]}]}, {"id": "T1106", "name": "Native API", "link": "https://attack.mitre.org/techniques/T1106/", "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools.", "signatures": [{"severity": "LOW", "description": ".NET source code references suspicious native API functions", "match_data": ["WindowsExtensions.OpenProcess(processID, (ProcessAccess)33554432)", "WindowsNative.LoadLibrary(libraryPath)", "WindowsNative.GetProcAddress(libraryHandle, procedureName)", "WindowsNative.VirtualAlloc(attemptImageBase, dwSize, WindowsNative.MEM.MEM_COMMIT | WindowsNative.MEM.MEM_RESERVE, WindowsNative.PAGE.PAGE_READWRITE)", "WindowsNative.VirtualProtect(loadedImageBase + sectionHeaders[i].VirtualAddress, (IntPtr)num, flNewProtect, &pAGE)"]}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "INFO", "description": ".NET source code contains functionality to register a task", "match_data": ["'CreateDefaultDropDown'"]}]}, {"id": "T1543", "name": "Create or Modify System Process", "link": "https://attack.mitre.org/techniques/T1543/", "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.  "}, {"id": "T1543.003", "name": "Windows Service", "link": "https://attack.mitre.org/techniques/T1543/003/", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the sc sdset command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as Get-Service, sc query, and services.exe.", "signatures": [{"severity": "INFO", "description": "Creates or modifies windows services", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\EventLog\\Application", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\ScreenConnect Client (bb705c8691efbc93)"]}, {"severity": "INFO", "description": "Modifies existing windows services", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\EventLog\\Application", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\ScreenConnect Client (bb705c8691efbc93)"]}]}, {"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses."}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "INFO", "description": "May use bcdedit to modify the Windows boot settings", "match_data": ["bcdedit.exeg/copy {current} /d \"Reboot and Reconnect Safe Mode\"7{.{8}-.{4}-.{4}-.{4}-.{12}}"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "aclayers.dll", "mpr.dll", "sfc.dll", "sfc_os.dll", "msi.dll", "srpapi.dll", "kernel.appcore.dll", "tsappcmp.dll", "uxtheme.dll", "netapi32.dll", "wkscli.dll", "netutils.dll", "windows.storage.dll", "wldp.dll", "userenv.dll", "profapi.dll", "sspicli.dll", "mscoree.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "pcacli.dll", "ntmarta.dll", "cabinet.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "urlmon.dll", "iertutil.dll", "srvcli.dll", "propsys.dll", "dpapi.dll", "amsi.dll", "gpapi.dll", "wtsapi32.dll", "winsta.dll", "mswsock.dll", "dnsapi.dll", "iphlpapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "samcli.dll", "samlib.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "winnsi.dll", "windowscodecs.dll", "wbemcomn.dll"]}]}, {"id": "T1574.001", "name": "DLL", "link": "https://attack.mitre.org/techniques/T1574/001/", "description": "Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.\nSpecific ways DLLs are abused by adversaries include:\nDLL Sideloading\nAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).\nSide-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.\nAdversaries may also side-load other packages, such as BPLs (Borland Package Library).\nDLL Search Order Hijacking\nAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.\nDLL Redirection\nAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.\nPhantom DLL Hijacking\nAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\nDLL Substitution\nAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.\nPrograms that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.\nRemote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.\nIf a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.", "signatures": [{"severity": "INFO", "description": "EXE hyjacking vulnerability found", "match_data": ["msiexec.exe"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1053", "name": "Scheduled Task/Job", "link": "https://attack.mitre.org/techniques/T1053/", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.", "signatures": [{"severity": "INFO", "description": ".NET source code contains functionality to register a task", "match_data": ["'CreateDefaultDropDown'"]}]}, {"id": "T1543", "name": "Create or Modify System Process", "link": "https://attack.mitre.org/techniques/T1543/", "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. \nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.  "}, {"id": "T1543.003", "name": "Windows Service", "link": "https://attack.mitre.org/techniques/T1543/003/", "description": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: .sys) to disk, the payload can be loaded and registered via Native API functions such as CreateServiceW() (or manually via functions such as ZwLoadDriver() and ZwSetValueKey()), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as PnPUtil.exe. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation.\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution.\nTo make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create \u2018hidden\u2019 services (i.e., Hide Artifacts), for example by using the sc sdset command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as Get-Service, sc query, and services.exe.", "signatures": [{"severity": "INFO", "description": "Creates or modifies windows services", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\EventLog\\Application", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\ScreenConnect Client (bb705c8691efbc93)"]}, {"severity": "INFO", "description": "Modifies existing windows services", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\EventLog\\Application", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\ScreenConnect Client (bb705c8691efbc93)"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "aclayers.dll", "mpr.dll", "sfc.dll", "sfc_os.dll", "msi.dll", "srpapi.dll", "kernel.appcore.dll", "tsappcmp.dll", "uxtheme.dll", "netapi32.dll", "wkscli.dll", "netutils.dll", "windows.storage.dll", "wldp.dll", "userenv.dll", "profapi.dll", "sspicli.dll", "mscoree.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "pcacli.dll", "ntmarta.dll", "cabinet.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "urlmon.dll", "iertutil.dll", "srvcli.dll", "propsys.dll", "dpapi.dll", "amsi.dll", "gpapi.dll", "wtsapi32.dll", "winsta.dll", "mswsock.dll", "dnsapi.dll", "iphlpapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "samcli.dll", "samlib.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "winnsi.dll", "windowscodecs.dll", "wbemcomn.dll"]}]}, {"id": "T1574.001", "name": "DLL", "link": "https://attack.mitre.org/techniques/T1574/001/", "description": "Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.\nSpecific ways DLLs are abused by adversaries include:\nDLL Sideloading\nAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).\nSide-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.\nAdversaries may also side-load other packages, such as BPLs (Borland Package Library).\nDLL Search Order Hijacking\nAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.\nDLL Redirection\nAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.\nPhantom DLL Hijacking\nAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\nDLL Substitution\nAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.\nPrograms that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.\nRemote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.\nIf a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.", "signatures": [{"severity": "INFO", "description": "EXE hyjacking vulnerability found", "match_data": ["msiexec.exe"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["Progman", "Shell_TrayWnd-Shell_SecondaryTrayWnd%MsgrIMEWindowClass"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses."}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "INFO", "description": "May use bcdedit to modify the Windows boot settings", "match_data": ["bcdedit.exeg/copy {current} /d \"Reboot and Reconnect Safe Mode\"7{.{8}-.{4}-.{4}-.{4}-.{12}}"]}]}, {"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "aclayers.dll", "mpr.dll", "sfc.dll", "sfc_os.dll", "msi.dll", "srpapi.dll", "kernel.appcore.dll", "tsappcmp.dll", "uxtheme.dll", "netapi32.dll", "wkscli.dll", "netutils.dll", "windows.storage.dll", "wldp.dll", "userenv.dll", "profapi.dll", "sspicli.dll", "mscoree.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "pcacli.dll", "ntmarta.dll", "cabinet.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "urlmon.dll", "iertutil.dll", "srvcli.dll", "propsys.dll", "dpapi.dll", "amsi.dll", "gpapi.dll", "wtsapi32.dll", "winsta.dll", "mswsock.dll", "dnsapi.dll", "iphlpapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "samcli.dll", "samlib.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll", "winnsi.dll", "windowscodecs.dll", "wbemcomn.dll"]}]}, {"id": "T1574.001", "name": "DLL", "link": "https://attack.mitre.org/techniques/T1574/001/", "description": "Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking.\nSpecific ways DLLs are abused by adversaries include:\nDLL Sideloading\nAdversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s).\nSide-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.\nAdversaries may also side-load other packages, such as BPLs (Borland Package Library).\nDLL Search Order Hijacking\nAdversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program.\nDLL Redirection\nAdversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location.\nPhantom DLL Hijacking\nAdversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module.\nDLL Substitution\nAdversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file.\nPrograms that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses.\nRemote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL.\nIf a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.", "signatures": [{"severity": "INFO", "description": "EXE hyjacking vulnerability found", "match_data": ["msiexec.exe"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["Progman", "Shell_TrayWnd-Shell_SecondaryTrayWnd%MsgrIMEWindowClass"]}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "INFO", "description": "Creates files inside the program directory", "match_data": ["C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\Installer\\5d2815.msi", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\inprogressinstallinfo.ipi", "C:\\Windows\\Installer\\SourceHash{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\MSI5F72.tmp", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\5d2818.msi", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}\\DefaultIcon", "C:\\Windows\\Installer\\MSI3FD3.tmp-", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\CustomAction.config", "C:\\Windows\\Installer\\wix{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}.SchedServiceConfig.rmi", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.tmp", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.newcfg", "C:\\Windows\\SystemTemp", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Users\\user\\AppData\\Local\\Microsoft\\CLR_v4.0_32\\UsageLogs\\rundll32.exe.log", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll"]}, {"severity": "INFO", "description": "Creates files inside the system directory", "match_data": ["C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\Installer\\5d2815.msi", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\inprogressinstallinfo.ipi", "C:\\Windows\\Installer\\SourceHash{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\MSI5F72.tmp", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\5d2818.msi", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}\\DefaultIcon", "C:\\Windows\\Installer\\MSI3FD3.tmp-", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\CustomAction.config", "C:\\Windows\\Installer\\wix{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}.SchedServiceConfig.rmi", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.tmp", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.newcfg", "C:\\Windows\\SystemTemp", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Users\\user\\AppData\\Local\\Microsoft\\CLR_v4.0_32\\UsageLogs\\rundll32.exe.log", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll"]}, {"severity": "LOW", "description": "Creates files in the system32 config directory", "match_data": ["C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\Installer\\5d2815.msi", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\inprogressinstallinfo.ipi", "C:\\Windows\\Installer\\SourceHash{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\MSI5F72.tmp", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\5d2818.msi", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}\\DefaultIcon", "C:\\Windows\\Installer\\MSI3FD3.tmp-", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\CustomAction.config", "C:\\Windows\\Installer\\wix{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}.SchedServiceConfig.rmi", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.tmp", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.newcfg", "C:\\Windows\\SystemTemp", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Users\\user\\AppData\\Local\\Microsoft\\CLR_v4.0_32\\UsageLogs\\rundll32.exe.log", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll"]}, {"severity": "INFO", "description": "Creates files inside the user directory", "match_data": ["C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\Installer\\5d2815.msi", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\inprogressinstallinfo.ipi", "C:\\Windows\\Installer\\SourceHash{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\MSI5F72.tmp", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\5d2818.msi", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}\\DefaultIcon", "C:\\Windows\\Installer\\MSI3FD3.tmp-", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\CustomAction.config", "C:\\Windows\\Installer\\wix{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}.SchedServiceConfig.rmi", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.tmp", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.newcfg", "C:\\Windows\\SystemTemp", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Users\\user\\AppData\\Local\\Microsoft\\CLR_v4.0_32\\UsageLogs\\rundll32.exe.log", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll"]}, {"severity": "INFO", "description": "Drops PE files to the windows directory (C:\\\\Windows)", "match_data": ["C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\Installer\\5d2815.msi", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\inprogressinstallinfo.ipi", "C:\\Windows\\Installer\\SourceHash{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\MSI5F72.tmp", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\5d2818.msi", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}", "C:\\Windows\\Installer\\{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}\\DefaultIcon", "C:\\Windows\\Installer\\MSI3FD3.tmp-", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\CustomAction.config", "C:\\Windows\\Installer\\wix{21BAAC73-D1B8-ECCA-F6F1-61A772DE0107}.SchedServiceConfig.rmi", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.tmp", "C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\ScreenConnect Client (bb705c8691efbc93)\\v3m4y2tc.newcfg", "C:\\Windows\\SystemTemp", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\CLR_v4.0\\UsageLogs\\ScreenConnect.WindowsClient.exe.log", "C:\\Users\\user\\AppData\\Local\\Microsoft\\CLR_v4.0_32\\UsageLogs\\rundll32.exe.log", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.Package.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp", "C:\\Windows\\Installer\\MSI73C7.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll", "C:\\Windows\\Installer\\MSI60DA.tmp", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.Compression.Cab.dll", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll"]}]}, {"id": "T1562", "name": "Impair Defenses", "link": "https://attack.mitre.org/techniques/T1562/", "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents."}, {"id": "T1562.001", "name": "Disable or Modify Tools", "link": "https://attack.mitre.org/techniques/T1562/001/", "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Alternatively, they may add new directories to an endpoint detection and response (EDR) tool\u2019s exclusion list, enabling them to hide malicious files via File/Path Exclusions.\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.", "signatures": [{"severity": "INFO", "description": "Creates guard pages, often used to prevent reverse engineering and debugging", "match_data": ["page read and write | page guard", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Lsa Authentication Packages"]}, {"severity": "LOW", "description": "Modifies security policies related information", "match_data": ["page read and write | page guard", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Lsa Authentication Packages"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Queries sensitive processor information (via WMI, Win32_Processor, often done to detect virtual machines)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "Allocates memory with a write watch (potentially for evading sandboxes)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}]}, {"id": "T1564", "name": "Hide Artifacts", "link": "https://attack.mitre.org/techniques/T1564/", "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology."}, {"id": "T1564.002", "name": "Hidden Users", "link": "https://attack.mitre.org/techniques/T1564/002/", "description": "Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. \nIn macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value Hide500Users to TRUE in the /Library/Preferences/com.apple.loginwindow plist file. Every user has a userID associated with it. When the Hide500Users key value is set to TRUE, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the dscl utility to create hidden user accounts by setting the IsHidden attribute to 1. Adversaries can also hide a user\u2019s home folder by changing the chflags to hidden. \nAdversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.\nOn Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the gsettings command (ex: sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true). Display Managers are not anchored to specific distributions and may be changed by a user or adversary.", "signatures": [{"severity": "LOW", "description": "Contains functionality to hide user accounts", "match_data": ["SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList?ScreenConnect.WindowsClient.exe"]}]}, {"id": "T1218", "name": "System Binary Proxy Execution", "link": "https://attack.mitre.org/techniques/T1218/", "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as split to proxy execution of malicious commands."}, {"id": "T1218.011", "name": "Rundll32", "link": "https://attack.mitre.org/techniques/T1218/011/", "description": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}).\nRundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. For example, ClickOnce can be proxied through Rundll32.exe.\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"  This behavior has been seen used by malware such as Poweliks. \nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1).\nAdditionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload. ", "signatures": [{"severity": "INFO", "description": "Runs a DLL by calling functions", "match_data": ["C:\\Windows\\SysWOW64\\rundll32.exe rundll32.exe \"C:\\Windows\\Installer\\MSI3FD3.tmp\",zzzzInvokeManagedCustomActionOutOfProc SfxCA_6111765 2 ScreenConnect.InstallerActions!ScreenConnect.ClientInstallerActi"]}]}, {"id": "T1070", "name": "Indicator Removal", "link": "https://attack.mitre.org/techniques/T1070/", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred."}, {"id": "T1070.006", "name": "Timestomp", "link": "https://attack.mitre.org/techniques/T1070/006/", "description": "Adversaries may modify file time attributes to hide new files or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files.\nIn Windows systems, both the $STANDARD_INFORMATION ($SI) and $FILE_NAME ($FN) attributes record times in a Master File Table (MFT) file. $SI (dates/time stamps) is displayed to the end user, including in the File System view, while $FN is dealt with by the kernel.\nModifying the $SI attribute is the most common method of timestomping because it can be modified at the user level using API calls. $FN timestomping, however, typically requires interacting with the system kernel or moving or renaming a file.\nAdversaries modify timestamps on files so that they do not appear conspicuous to forensic investigators or file analysis tools. In order to evade detections that rely on identifying discrepancies between the $SI and $FN attributes, adversaries may also engage in \u201cdouble timestomping\u201d by modifying times on both attributes simultaneously.\nIn Linux systems and on ESXi servers, threat actors may attempt to perform timestomping using commands such as touch -a -m -t <timestamp> <filename> (which sets access and modification times to a specific value) or touch -r <filename> <filename> (which sets access and modification times to match those of another file).\nTimestomping may be used along with file name Masquerading to hide malware and tools.", "signatures": [{"severity": "INFO", "description": "Binary contains a suspicious time stamp", "match_data": ["0x97FF8231 [Sun Oct 23 02:23:45 2050 UTC]"]}]}, {"id": "T1070.004", "name": "File Deletion", "link": "https://attack.mitre.org/techniques/T1070/004/", "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include del on Windows, rm or unlink on Linux and macOS, and rm on ESXi.", "signatures": [{"severity": "INFO", "description": "Deletes files inside the Windows folder", "match_data": ["C:\\Windows\\Installer\\MSI3FD3.tmp"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Queries sensitive processor information (via WMI, Win32_Processor, often done to detect virtual machines)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "Allocates memory with a write watch (potentially for evading sandboxes)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "delay time: 922337203685477", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "12E0000 memory reserve | memory write watch", "1370000 memory reserve | memory write watch", "3370000 memory reserve | memory write watch", "1020000 memory reserve | memory write watch", "1AC30000 memory reserve | memory write watch", "24A0000 memory reserve | memory write watch", "1A770000 memory reserve | memory write watch", "delay time: 922337203685477", "46 > 30", "-922337203685477s >= -30000s"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive processor information (via WMI, Win32_Processor, often done to detect virtual machines)", "match_data": ["Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem"]}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "May try to detect the Windows Explorer process (often used for injection)", "match_data": ["Progman", "Shell_TrayWnd-Shell_SecondaryTrayWnd%MsgrIMEWindowClass", "ProcessInformation"]}, {"severity": "INFO", "description": "Queries a list of all running processes", "match_data": ["Progman", "Shell_TrayWnd-Shell_SecondaryTrayWnd%MsgrIMEWindowClass", "ProcessInformation"]}]}, {"id": "T1120", "name": "Peripheral Device Discovery", "link": "https://attack.mitre.org/techniques/T1120/", "description": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.", "signatures": [{"severity": "INFO", "description": "Sample is looking for USB drives. Launch the sample with the USB Fake Disk cookbook", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "a:"]}, {"severity": "INFO", "description": "Checks for available system drives (often done to infect USB drives)", "match_data": ["z:", "x:", "v:", "t:", "r:", "p:", "n:", "l:", "j:", "h:", "f:", "d:", "b:", "y:", "w:", "u:", "s:", "q:", "o:", "m:", "k:", "i:", "g:", "e:", "c:", "a:"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Checks the free space of harddrives", "match_data": ["C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "C:\\ VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.ClientService.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Core.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Client.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.WindowsClient.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Deployment\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Deployment.dll VolumeInformation"]}, {"severity": "INFO", "description": "Queries information about the installed CPU (vendor, model number etc)", "match_data": ["C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "C:\\ VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.ClientService.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Core.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Client.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.WindowsClient.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Deployment\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Deployment.dll VolumeInformation"]}, {"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "C:\\ VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.ClientService.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Core.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Client.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.WindowsClient.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Deployment\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Deployment.dll VolumeInformation"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "C:\\ VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.ClientService.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Core.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Client.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.WindowsClient.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Deployment\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Deployment.dll VolumeInformation"]}, {"severity": "LOW", "description": "Queries BIOS Information (via WMI, Win32_Bios)", "match_data": ["C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "C:\\ VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.ClientService.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Core.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Client.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.WindowsClient.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Deployment\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Deployment.dll VolumeInformation"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "C:\\ VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.ClientService.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Core.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Client.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.WindowsClient.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Deployment\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Deployment.dll VolumeInformation"]}, {"severity": "INFO", "description": "Queries process information (via WMI, Win32_Process)", "match_data": ["C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "C:\\ VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.ClientService.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Core.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Client.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.WindowsClient.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Deployment\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Deployment.dll VolumeInformation"]}, {"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["C:\\ FullSizeInformation", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_BIOS", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_ComputerSystem", "IWbemServices::ExecQuery - root\\cimv2 : select * from Win32_Processor", "C:\\ VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\Microsoft.Deployment.WindowsInstaller.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.InstallerActions.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Core.dll VolumeInformation", "C:\\Windows\\Installer\\MSI3FD3.tmp-\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.ClientService.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Core.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Windows.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.Client.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Program Files (x86)\\ScreenConnect Client (bb705c8691efbc93)\\ScreenConnect.WindowsClient.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Deployment\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Deployment.dll VolumeInformation"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1571", "name": "Non-Standard Port", "link": "https://attack.mitre.org/techniques/T1571/", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.", "signatures": [{"severity": "INFO", "description": "Detected TCP or UDP traffic on non-standard ports", "match_data": ["192.168.122.101:49685 -> 46.253.4.18:8041"]}]}, {"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: daqqoi1a.anondns.net"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: daqqoi1a.anondns.net"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/e6a4f2de6f4e37b2a25beeeefb60ecb5af8f204c6d42c46ee885dec38f313d36/behaviour_mitre_trees"}}