{"data": {"CAPA": {"tactics": [{"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "modify access privileges"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "modify access privileges"}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "encode data using XOR"}, {"severity": "INFO", "description": "encrypt data using RC4 PRGA"}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "INFO", "description": "packed with generic packer"}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Qemu"}, {"severity": "INFO", "description": "reference anti-VM strings targeting VirtualBox"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "query environment variable"}, {"severity": "INFO", "description": "check OS version"}, {"severity": "INFO", "description": "get disk information"}, {"severity": "INFO", "description": "get disk size"}, {"severity": "INFO", "description": "get system information on Windows"}]}, {"id": "T1614", "name": "System Location Discovery", "link": "https://attack.mitre.org/techniques/T1614/", "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.", "signatures": [{"severity": "INFO", "description": "get geographical location"}]}, {"id": "T1614.001", "name": "System Language Discovery", "link": "https://attack.mitre.org/techniques/T1614/001/", "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. \nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language or parsing the outputs of Windows API functions GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID.\nOn a macOS or Linux system, adversaries may query locale to retrieve the value of the $LANG environment variable.", "signatures": [{"severity": "INFO", "description": "identify system language via API"}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "check if file exists"}, {"severity": "INFO", "description": "get file size"}, {"severity": "INFO", "description": "get common file path"}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}, {"severity": "INFO", "description": "reference anti-VM strings targeting Qemu"}, {"severity": "INFO", "description": "reference anti-VM strings targeting VirtualBox"}]}, {"id": "T1012", "name": "Query Registry", "link": "https://attack.mitre.org/techniques/T1012/", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "signatures": [{"severity": "INFO", "description": "query or enumerate registry value"}]}]}, {"id": "TA0040", "name": "Impact", "link": "https://attack.mitre.org/tactics/TA0040/", "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.", "techniques": [{"id": "T1529", "name": "System Shutdown/Reboot", "link": "https://attack.mitre.org/techniques/T1529/", "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. reload). They may also include shutdown/reboot of a virtual machine via hypervisor / cloud consoles or command line tools.\nShutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery.\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability.", "signatures": [{"severity": "INFO", "description": "shutdown system"}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "INFO", "description": "link function at runtime on Windows"}]}, {"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "INFO", "description": "accept command line arguments"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may execute malicious payloads via loading shared modules."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools."}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1548", "name": "Abuse Elevation Control Mechanism", "link": "https://attack.mitre.org/techniques/T1548/", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions."}]}, {"id": "T1070", "name": "Indicator Removal", "link": "https://attack.mitre.org/techniques/T1070/", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary\u2019s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.\nRemoval of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses."}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1548", "name": "Abuse Elevation Control Mechanism", "link": "https://attack.mitre.org/techniques/T1548/", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."}]}]}, {"id": "TA0040", "name": "Impact", "link": "https://attack.mitre.org/tactics/TA0040/", "description": "The adversary is trying to manipulate, interrupt, or destroy your systems and data.\n \nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.", "techniques": [{"id": "T1485", "name": "Data Destruction", "link": "https://attack.mitre.org/techniques/T1485/", "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data.\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares..\nIn cloud environments, adversaries may leverage access to delete cloud storage objects, machine images, database instances, and other infrastructure crucial to operations to damage an organization or their customers. Similarly, they may delete virtual machines from on-prem virtualized environments.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources."}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1059", "name": "Command and Scripting Interpreter", "link": "https://attack.mitre.org/techniques/T1059/", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.\nThere are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution.", "signatures": [{"severity": "INFO", "description": "Sample might require command line arguments, analyze it with the command line cookbook", "match_data": ["/LOADINF=\"filename\""]}, {"severity": "INFO", "description": "Sample may offer command line options, please run it with the command line option cookbook (it's possible that the command line switches require additional characters like)", "match_data": ["/LOADINF=\"filename\""]}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["uxtheme.dll", "apphelp.dll", "mpr.dll", "version.dll", "wtsapi32.dll", "winhttp.dll", "kernel.appcore.dll", "iconcodecservice.dll", "windowscodecs.dll", "winsta.dll", "shfolder.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "textshaping.dll", "textinputframework.dll", "coreuicomponents.dll", "coremessaging.dll", "ntmarta.dll", "wintypes.dll", "windows.storage.dll", "wldp.dll", "sspicli.dll", "dwmapi.dll", "sfc.dll", "sfc_os.dll", "explorerframe.dll", "propsys.dll", "profapi.dll", "linkinfo.dll", "ntshrui.dll", "srvcli.dll", "cscapi.dll", "netutils.dll", "oycy.dll", "iphlpapi.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "atl.dll", "mscoree.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "msasn1.dll", "amsi.dll", "userenv.dll", "gpapi.dll", "msisip.dll", "wshext.dll", "appxsip.dll", "opcservices.dll", "urlmon.dll", "xmllite.dll", "iertutil.dll", "secur32.dll", "microsoft.management.infrastructure.native.unmanaged.dll", "mi.dll", "miutils.dll", "wmidcom.dll", "dpapi.dll", "wbemcomn.dll", "fastprox.dll", "ncobjapi.dll", "mpclient.dll", "wmitomi.dll", "loadperf.dll"]}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "Stores large binary data to the registry", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\539D2484-9ED7-49A2-BEBF-6BD78E42A1E1 539D2484-9ED7-49A2-BEBF-6BD78E42A1E1"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["uxtheme.dll", "apphelp.dll", "mpr.dll", "version.dll", "wtsapi32.dll", "winhttp.dll", "kernel.appcore.dll", "iconcodecservice.dll", "windowscodecs.dll", "winsta.dll", "shfolder.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "textshaping.dll", "textinputframework.dll", "coreuicomponents.dll", "coremessaging.dll", "ntmarta.dll", "wintypes.dll", "windows.storage.dll", "wldp.dll", "sspicli.dll", "dwmapi.dll", "sfc.dll", "sfc_os.dll", "explorerframe.dll", "propsys.dll", "profapi.dll", "linkinfo.dll", "ntshrui.dll", "srvcli.dll", "cscapi.dll", "netutils.dll", "oycy.dll", "iphlpapi.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "atl.dll", "mscoree.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "msasn1.dll", "amsi.dll", "userenv.dll", "gpapi.dll", "msisip.dll", "wshext.dll", "appxsip.dll", "opcservices.dll", "urlmon.dll", "xmllite.dll", "iertutil.dll", "secur32.dll", "microsoft.management.infrastructure.native.unmanaged.dll", "mi.dll", "miutils.dll", "wmidcom.dll", "dpapi.dll", "wbemcomn.dll", "fastprox.dll", "ncobjapi.dll", "mpclient.dll", "wmitomi.dll", "loadperf.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "LOW", "description": "Injects a PE file into a foreign processes", "match_data": ["C:\\Windows\\System32\\svchost.exe base: 1F885340000 value starts with: 4D5A", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 value starts with: 4D5A", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000", "C:\\Windows\\System32\\svchost.exe base: 1F885340000", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000 protect: page execute and read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000 protect: page read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F885340000 protect: page execute and read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 protect: page execute and read and write", "PID: 5216 base: 185C68E0000 value: E9"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Windows\\System32\\svchost.exe base: 1F885340000 value starts with: 4D5A", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 value starts with: 4D5A", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000", "C:\\Windows\\System32\\svchost.exe base: 1F885340000", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000 protect: page execute and read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000 protect: page read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F885340000 protect: page execute and read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 protect: page execute and read and write", "PID: 5216 base: 185C68E0000 value: E9"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Windows\\System32\\svchost.exe base: 1F885340000 value starts with: 4D5A", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 value starts with: 4D5A", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000", "C:\\Windows\\System32\\svchost.exe base: 1F885340000", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000 protect: page execute and read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000 protect: page read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F885340000 protect: page execute and read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 protect: page execute and read and write", "PID: 5216 base: 185C68E0000 value: E9"]}, {"severity": "LOW", "description": "Hijacks the control flow in another process", "match_data": ["C:\\Windows\\System32\\svchost.exe base: 1F885340000 value starts with: 4D5A", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 value starts with: 4D5A", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000", "C:\\Windows\\System32\\svchost.exe base: 1F885340000", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000 protect: page execute and read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000 protect: page read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F885340000 protect: page execute and read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 protect: page execute and read and write", "PID: 5216 base: 185C68E0000 value: E9"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["uxtheme.dll", "apphelp.dll", "mpr.dll", "version.dll", "wtsapi32.dll", "winhttp.dll", "kernel.appcore.dll", "iconcodecservice.dll", "windowscodecs.dll", "winsta.dll", "shfolder.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "textshaping.dll", "textinputframework.dll", "coreuicomponents.dll", "coremessaging.dll", "ntmarta.dll", "wintypes.dll", "windows.storage.dll", "wldp.dll", "sspicli.dll", "dwmapi.dll", "sfc.dll", "sfc_os.dll", "explorerframe.dll", "propsys.dll", "profapi.dll", "linkinfo.dll", "ntshrui.dll", "srvcli.dll", "cscapi.dll", "netutils.dll", "oycy.dll", "iphlpapi.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "atl.dll", "mscoree.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "msasn1.dll", "amsi.dll", "userenv.dll", "gpapi.dll", "msisip.dll", "wshext.dll", "appxsip.dll", "opcservices.dll", "urlmon.dll", "xmllite.dll", "iertutil.dll", "secur32.dll", "microsoft.management.infrastructure.native.unmanaged.dll", "mi.dll", "miutils.dll", "wmidcom.dll", "dpapi.dll", "wbemcomn.dll", "fastprox.dll", "ncobjapi.dll", "mpclient.dll", "wmitomi.dll", "loadperf.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "LOW", "description": "Injects a PE file into a foreign processes", "match_data": ["C:\\Windows\\System32\\svchost.exe base: 1F885340000 value starts with: 4D5A", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 value starts with: 4D5A", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000", "C:\\Windows\\System32\\svchost.exe base: 1F885340000", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000 protect: page execute and read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000 protect: page read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F885340000 protect: page execute and read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 protect: page execute and read and write", "PID: 5216 base: 185C68E0000 value: E9"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Windows\\System32\\svchost.exe base: 1F885340000 value starts with: 4D5A", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 value starts with: 4D5A", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000", "C:\\Windows\\System32\\svchost.exe base: 1F885340000", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000 protect: page execute and read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000 protect: page read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F885340000 protect: page execute and read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 protect: page execute and read and write", "PID: 5216 base: 185C68E0000 value: E9"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Windows\\System32\\svchost.exe base: 1F885340000 value starts with: 4D5A", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 value starts with: 4D5A", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000", "C:\\Windows\\System32\\svchost.exe base: 1F885340000", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000 protect: page execute and read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000 protect: page read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F885340000 protect: page execute and read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 protect: page execute and read and write", "PID: 5216 base: 185C68E0000 value: E9"]}, {"severity": "LOW", "description": "Hijacks the control flow in another process", "match_data": ["C:\\Windows\\System32\\svchost.exe base: 1F885340000 value starts with: 4D5A", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 value starts with: 4D5A", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000", "C:\\Windows\\System32\\svchost.exe base: 1F885340000", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C68E0000 protect: page execute and read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6510000 protect: page read and write", "C:\\Windows\\System32\\wbem\\WmiApSrv.exe base: 185C6520000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F885340000 protect: page execute and read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845D0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1F8845E0000 protect: page read and write", "C:\\Windows\\System32\\svchost.exe base: 1AD83890000 protect: page execute and read and write", "PID: 5216 base: 185C68E0000 value: E9"]}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "INFO", "description": "Creates files inside the user directory", "match_data": ["C:\\Users\\Public\\0b2f165"]}]}, {"id": "T1562", "name": "Impair Defenses", "link": "https://attack.mitre.org/techniques/T1562/", "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents."}, {"id": "T1562.001", "name": "Disable or Modify Tools", "link": "https://attack.mitre.org/techniques/T1562/001/", "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Alternatively, they may add new directories to an endpoint detection and response (EDR) tool\u2019s exclusion list, enabling them to hide malicious files via File/Path Exclusions.\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.", "signatures": [{"severity": "LOW", "description": "Adds a directory exclusion to Windows Defender", "match_data": ["C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe powershell -Command \"Add-MpPreference -ExclusionPath 'C:\\'\""]}]}, {"id": "T1112", "name": "Modify Registry", "link": "https://attack.mitre.org/techniques/T1112/", "description": "Adversaries may interact with the Windows Registry as part of a variety of other techniques to aid in defense evasion, persistence, and execution.\nAccess to specific areas of the Registry depends on account permissions, with some keys requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. Other tools, such as remote access tools, may also contain functionality to interact with the Registry through the Windows API.\nThe Registry may be modified in order to hide configuration information or malicious payloads via Obfuscated Files or Information. The Registry may also be modified to Impair Defenses, such as by enabling macros for all Microsoft Office products, allowing privilege escalation without alerting the user, increasing the maximum number of allowed outbound requests, and/or modifying systems to store plaintext credentials in memory.\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication.\nFinally, Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API. Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.", "signatures": [{"severity": "INFO", "description": "Stores large binary data to the registry", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\539D2484-9ED7-49A2-BEBF-6BD78E42A1E1 539D2484-9ED7-49A2-BEBF-6BD78E42A1E1"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "LOW", "description": "Hides threads from debuggers", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Checks for kernel debuggers (NtQuerySystemInformation(SystemKernelDebuggerInformation))", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "Binary may include packed or crypted data", "match_data": ["section name: .vmp0 entropy: 6.883962128462842", "section name: .7xh entropy: 7.561489292911734"]}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "INFO", "description": "Binary may include packed or crypted data", "match_data": ["section name: .vmp0 entropy: 6.883962128462842", "section name: .7xh entropy: 7.561489292911734"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "LOW", "description": "Hides threads from debuggers", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Checks for kernel debuggers (NtQuerySystemInformation(SystemKernelDebuggerInformation))", "match_data": ["HideFromDebugger", "-922337203685477s >= -30000s", "delay time: 922337203685477", "delay time: 922337203685477", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "LOW", "description": "Tries to detect debuggers (CloseHandle check)", "match_data": ["DEADC0DE", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Get-NetEventVmNetworkAdapter", "First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["DEADC0DE", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Get-NetEventVmNetworkAdapter", "First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "LOW", "description": "Tries to detect virtualization through RDTSC time measurements", "match_data": ["DEADC0DE", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Get-NetEventVmNetworkAdapter", "First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "LOW", "description": "Tries to evade analysis by execution special instruction (VM detection)", "match_data": ["DEADC0DE", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Get-NetEventVmNetworkAdapter", "First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "LOW", "description": "Hides threads from debuggers", "match_data": ["DEADC0DE", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Get-NetEventVmNetworkAdapter", "First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["DEADC0DE", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Get-NetEventVmNetworkAdapter", "First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}, {"severity": "INFO", "description": "Checks for kernel debuggers (NtQuerySystemInformation(SystemKernelDebuggerInformation))", "match_data": ["DEADC0DE", "Remove-NetEventVmNetworkAdapter", "Add-NetEventVmNetworkAdapter", "Get-NetEventVmNetworkAdapter", "First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HideFromDebugger", "DebugPort", "DebugObjectHandle", "KernelDebuggerInformation"]}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "Queries a list of all running processes", "match_data": ["ProcessInformation", "HandleInformation"]}, {"severity": "INFO", "description": "Queries a list of all open handles", "match_data": ["ProcessInformation", "HandleInformation"]}]}, {"id": "T1010", "name": "Application Window Discovery", "link": "https://attack.mitre.org/techniques/T1010/", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "signatures": [{"severity": "INFO", "description": "Sample monitors Window changes (e.g. starting applications), analyze the sample with the simulation cookbook"}]}, {"id": "T1033", "name": "System Owner/User Discovery", "link": "https://attack.mitre.org/techniques/T1033/", "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nVarious utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.\nOn network devices, Network Device CLI commands such as show users and show ssh can be used to display users currently logged into the device.", "signatures": [{"severity": "INFO", "description": "Reads the Windows registered owner settings", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion RegisteredOwner", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion RegisteredOrganization"]}, {"severity": "INFO", "description": "Reads the Windows registered organization settings", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion RegisteredOwner", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion RegisteredOrganization"]}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "Reads ini files", "match_data": ["C:\\Users\\desktop.ini"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "LOW", "description": "Tries to detect virtualization through RDTSC time measurements", "match_data": ["First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HandleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Windows-Defender-Management-Powershell-Group-Package~31bf3856ad364e35~amd64~~10.0.19041.1.cat VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "LOW", "description": "Tries to evade analysis by execution special instruction (VM detection)", "match_data": ["First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HandleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Windows-Defender-Management-Powershell-Group-Package~31bf3856ad364e35~amd64~~10.0.19041.1.cat VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Queries a list of all open handles", "match_data": ["First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HandleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Windows-Defender-Management-Powershell-Group-Package~31bf3856ad364e35~amd64~~10.0.19041.1.cat VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HandleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Windows-Defender-Management-Powershell-Group-Package~31bf3856ad364e35~amd64~~10.0.19041.1.cat VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HandleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Windows-Defender-Management-Powershell-Group-Package~31bf3856ad364e35~amd64~~10.0.19041.1.cat VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["First address: 185C7ED6F59 second address: 185C7ED6FB4 instructions: 0x00000000 rdtsc 0x00000002 mov eax, dword ptr [esp+20h] 0x00000006 inc ax 0x00000008 movsx ecx, ah 0x0000000b movzx edx, bp 0x0000", "First address: 7FFC67E1CA57 instructions rdtsc caused by: RDTSC with Trap Flag (TF)", "HandleInformation", "C:\\ VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Microsoft-Windows-Client-Features-Package0213~31bf3856ad364e35~amd64~~10.0.19041.1237.cat VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Data\\v4.0_4.0.0.0__b77a5c561934e089\\System.Data.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_64\\System.Transactions\\v4.0_4.0.0.0__b77a5c561934e089\\System.Transactions.dll VolumeInformation", "C:\\Windows\\System32\\CatRoot\\{F750E6C3-38EE-11D1-85E5-00C04FC295EE}\\Windows-Defender-Management-Powershell-Group-Package~31bf3856ad364e35~amd64~~10.0.19041.1.cat VolumeInformation", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers"]}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture)."}, {"id": "T1056.004", "name": "Credential API Hooking", "link": "https://attack.mitre.org/techniques/T1056/004/", "description": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials. Unlike Keylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials. \nIn Windows, hooking involves redirecting calls to these functions and can be implemented via:\n\nHooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\nImport address table (IAT) hooking, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\nInline hooking, which overwrites the first bytes in an API function to redirect code flow.\n\nIn Linux and macOS, adversaries may hook into system functions via the LD_PRELOAD (Linux) or DYLD_INSERT_LIBRARIES (macOS) environment variables, which enables loading shared libraries into a program\u2019s address space. For example, an adversary may capture credentials by hooking into the libc read function leveraged by SSH or SCP.", "signatures": [{"severity": "LOW", "description": "Overwrites code with unconditional jumps - possibly settings hooks in foreign process", "match_data": ["PID: 5492 base: 7FFC86C5000D value: E9 3B C9 EC FF ", "PID: 5492 base: 7FFC86B1C940 value: E9 DA 36 13 00 "]}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture)."}, {"id": "T1056.004", "name": "Credential API Hooking", "link": "https://attack.mitre.org/techniques/T1056/004/", "description": "Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials. Unlike Keylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials. \nIn Windows, hooking involves redirecting calls to these functions and can be implemented via:\n\nHooks procedures, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.\nImport address table (IAT) hooking, which use modifications to a process\u2019s IAT, where pointers to imported API functions are stored.\nInline hooking, which overwrites the first bytes in an API function to redirect code flow.\n\nIn Linux and macOS, adversaries may hook into system functions via the LD_PRELOAD (Linux) or DYLD_INSERT_LIBRARIES (macOS) environment variables, which enables loading shared libraries into a program\u2019s address space. For example, an adversary may capture credentials by hooking into the libc read function leveraged by SSH or SCP.", "signatures": [{"severity": "LOW", "description": "Overwrites code with unconditional jumps - possibly settings hooks in foreign process", "match_data": ["PID: 5492 base: 7FFC86C5000D value: E9 3B C9 EC FF ", "PID: 5492 base: 7FFC86B1C940 value: E9 DA 36 13 00 "]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/6f4ca66fe5991604a09ebf2cf1e2d8d98d4867d2df2c2a87f59fcd1801f0bc83/behaviour_mitre_trees"}}