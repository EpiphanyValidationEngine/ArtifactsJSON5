{"data": {"CAPA": {"tactics": [{"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "check OS version"}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "enumerate files on Windows"}, {"severity": "INFO", "description": "get file size"}]}, {"id": "T1614", "name": "System Location Discovery", "link": "https://attack.mitre.org/techniques/T1614/", "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.", "signatures": [{"severity": "INFO", "description": "get geographical location"}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "INFO", "description": "access PEB ldr_data"}, {"severity": "INFO", "description": "link many functions at runtime"}, {"severity": "INFO", "description": "get ntdll base address"}, {"severity": "INFO", "description": "link function at runtime on Windows"}, {"severity": "INFO", "description": "parse PE header"}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "encode data using XOR"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses."}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1542", "name": "Pre-OS Boot", "link": "https://attack.mitre.org/techniques/T1542/", "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses."}, {"id": "T1542.003", "name": "Bootkit", "link": "https://attack.mitre.org/techniques/T1542/003/", "description": "Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nIn BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code.\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.\nIn UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may use bootkits to persist on systems."}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture."}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to get information about running processes on a system."}]}, {"id": "T1012", "name": "Query Registry", "link": "https://attack.mitre.org/techniques/T1012/", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}]}, "VMRay": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1143", "name": "Hidden Window", "link": "https://attack.mitre.org/techniques/T1143/", "description": "Adversaries may implement hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse operating system functionality to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.\nWindows\nThere are a variety of features in scripting languages in Windows, such as PowerShell, Jscript, and VBScript to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden.  \nMac\nThe configurations for how applications run on macOS are listed in property list (plist) files. One of the tags in these files can be\u00a0apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window.", "signatures": [{"severity": "INFO", "description": "(Process #1) securiteinfo.com.win32.malwarex-gen.26952.14499.exe starts (process #17) caspol.exe with a hidden window."}]}, {"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "INFO", "description": "(Process #1) securiteinfo.com.win32.malwarex-gen.26952.14499.exe overwrites code to possibly hide behavior."}]}, {"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "(Process #17) caspol.exe enables process privilege \"SeDebugPrivilege\"."}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1134", "name": "Access Token Manipulation", "link": "https://attack.mitre.org/techniques/T1134/", "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.\nAny standard user can use the runas command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.", "signatures": [{"severity": "INFO", "description": "(Process #17) caspol.exe enables process privilege \"SeDebugPrivilege\"."}]}]}, {"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1047", "name": "Windows Management Instrumentation", "link": "https://attack.mitre.org/techniques/T1047/", "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, wmic.exe can be abused by an adversary to delete shadow copies with the command wmic.exe Shadowcopy Delete (i.e., Inhibit System Recovery).\nNote: wmic.exe is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like wbemtool.exe, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.", "signatures": [{"severity": "MEDIUM", "description": "(Process #17) caspol.exe tries to detect antivirus software via WMI query: \"Select * from AntivirusProduct\"."}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "LOW", "description": "(Process #17) caspol.exe reads Windows license key from registry."}]}, {"id": "T1063", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1063/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nWindows\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\nMac\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.", "signatures": [{"severity": "MEDIUM", "description": "(Process #17) caspol.exe tries to detect antivirus software via WMI query: \"Select * from AntivirusProduct\"."}]}, {"id": "T1016", "name": "System Network Configuration Discovery", "link": "https://attack.mitre.org/techniques/T1016/", "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface). On ESXi, adversaries may leverage esxcli to gather network configuration information. For example, the command esxcli network nic list will retrieve the MAC address, while esxcli network ip interface ipv4 get will retrieve the local IPv4 address.\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ", "signatures": [{"severity": "LOW", "description": "(Process #17) caspol.exe reads the network adapters' addresses by API."}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "LOW", "description": "(Process #17) caspol.exe tries to gather information about application \"Pidgin\" by file."}]}, {"id": "T1012", "name": "Query Registry", "link": "https://attack.mitre.org/techniques/T1012/", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "signatures": [{"severity": "LOW", "description": "(Process #17) caspol.exe reads Windows license key from registry."}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1113", "name": "Screen Capture", "link": "https://attack.mitre.org/techniques/T1113/", "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.", "signatures": [{"severity": "MEDIUM", "description": "(Process #17) caspol.exe takes a screenshot using BitBlt API."}]}, {"id": "T1119", "name": "Automated Collection", "link": "https://attack.mitre.org/techniques/T1119/", "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. \nIn cloud-based environments, adversaries may also use cloud APIs, data pipelines, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. \nThis functionality could also be built into remote access tools. \nThis technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments.", "signatures": [{"severity": "HIGH", "description": "(Process #17) caspol.exe takes screenshots and potentially exfiltrates data."}]}, {"id": "T1005", "name": "Data from Local System", "link": "https://attack.mitre.org/techniques/T1005/", "description": "Adversaries may search local system sources, such as file systems, configuration files, local databases, or virtual machine files, to find files of interest and sensitive data prior to Exfiltration.\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.", "signatures": [{"severity": "LOW", "description": "(Process #17) caspol.exe searches for sensitive data of web browser \"k-Meleon\" by file."}]}, {"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "HIGH", "description": "(Process #17) caspol.exe takes screenshots and potentially exfiltrates data."}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1081", "name": "Credentials in Files", "link": "https://attack.mitre.org/techniques/T1081/", "description": "Adversaries may search local file systems and remote file shares for files containing passwords. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\nIt is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping.  Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. \nIn cloud environments, authenticated user credentials are often stored in local configuration and credential files. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files. ", "signatures": [{"severity": "LOW", "description": "(Process #17) caspol.exe searches for sensitive data of web browser \"k-Meleon\" by file."}]}, {"id": "T1214", "name": "Credentials in Registry", "link": "https://attack.mitre.org/techniques/T1214/", "description": "The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\nExample commands to find Registry keys related to password information: \n\nLocal Machine Hive: reg query HKLM /f password /t REG_SZ /s\nCurrent User Hive: reg query HKCU /f password /t REG_SZ /s\n", "signatures": [{"severity": "LOW", "description": "(Process #17) caspol.exe tries to access sensitive data of application \"WinSCP\" by registry."}]}, {"id": "T1056", "name": "Input Capture", "link": "https://attack.mitre.org/techniques/T1056/", "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture).", "signatures": [{"severity": "HIGH", "description": "(Process #17) caspol.exe takes screenshots and potentially exfiltrates data."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1065", "name": "Uncommonly Used Port", "link": "https://attack.mitre.org/techniques/T1065/", "description": "Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.", "signatures": [{"severity": "INFO", "description": "(Process #3) regsvcs.exe tries to connect to TCP port 7702 at 23.95.162.99."}]}]}]}, "Yomi Hunter": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1129", "name": "Shared Modules", "link": "https://attack.mitre.org/techniques/T1129/", "description": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API).\nAdversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective.\nThe Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in dlfcn.h in functions such as dlopen and dlsym. Although macOS can execute .so files, common practice uses .dylib files.\nThe Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like LoadLibrary at run time.", "signatures": [{"severity": "UNKNOWN", "description": "The process tried to load dynamically one or more functions."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1045", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1045/", "description": "Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.\nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available,  but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.\nAdversaries may use virtual machine software protection as a form of software packing to protect their code. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.", "signatures": [{"severity": "UNKNOWN", "description": "Manalize Local SandBox Packer Harvesting"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. ESXi also supports use of the ps command, as well as esxcli system process list.\nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "UNKNOWN", "description": "The process attempted to detect a running debugger using common APIs"}]}, {"id": "T1063", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1063/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nWindows\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.\nMac\nIt's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.", "signatures": [{"severity": "UNKNOWN", "description": "It Tries to detect injection methods"}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0002", "name": "Execution", "link": "https://attack.mitre.org/tactics/TA0002/", "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ", "techniques": [{"id": "T1047", "name": "Windows Management Instrumentation", "link": "https://attack.mitre.org/techniques/T1047/", "description": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is designed for programmers and is the infrastructure for management data and operations on Windows systems. WMI is an administration feature that provides a uniform environment to access Windows system components.\nThe WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model and Windows Remote Management. Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS. \nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as Execution of commands and payloads. For example, wmic.exe can be abused by an adversary to delete shadow copies with the command wmic.exe Shadowcopy Delete (i.e., Inhibit System Recovery).\nNote: wmic.exe is deprecated as of January of 2024, with the WMIC feature being \u201cdisabled by default\u201d on Windows 11+. WMIC will be removed from subsequent Windows releases and replaced by PowerShell as the primary WMI interface. In addition to PowerShell and tools like wbemtool.exe, COM APIs can also be used to programmatically interact with WMI via C++, .NET, VBScript, etc.", "signatures": [{"severity": "LOW", "description": "Queries BIOS Information (via WMI, Win32_Bios)", "match_data": ["IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "INFO", "description": "Checks if Antivirus program is installed (via WMI)", "match_data": ["IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "INFO", "description": "Queries sensitive processor information (via WMI, Win32_Processor, often done to detect virtual machines)", "match_data": ["IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "INFO", "description": "Queries process information (via WMI, Win32_Process)", "match_data": ["IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}]}]}, {"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "wininet.dll", "iertutil.dll", "sspicli.dll", "windows.storage.dll", "wldp.dll", "profapi.dll", "kernel.appcore.dll", "ondemandconnroutehelper.dll", "winhttp.dll", "mswsock.dll", "iphlpapi.dll", "winnsi.dll", "urlmon.dll", "srvcli.dll", "netutils.dll", "dnsapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "schannel.dll", "mskeyprotect.dll", "ntasn1.dll", "msasn1.dll", "dpapi.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "ncrypt.dll", "ncryptsslp.dll", "mscoree.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "propsys.dll", "amsi.dll", "userenv.dll", "gpapi.dll", "wbemcomn.dll", "uxtheme.dll", "windowscodecs.dll", "edputil.dll", "napinsp.dll", "pnrpnsp.dll", "wshbth.dll", "nlaapi.dll", "winrnr.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "wininet.dll", "iertutil.dll", "sspicli.dll", "windows.storage.dll", "wldp.dll", "profapi.dll", "kernel.appcore.dll", "ondemandconnroutehelper.dll", "winhttp.dll", "mswsock.dll", "iphlpapi.dll", "winnsi.dll", "urlmon.dll", "srvcli.dll", "netutils.dll", "dnsapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "schannel.dll", "mskeyprotect.dll", "ntasn1.dll", "msasn1.dll", "dpapi.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "ncrypt.dll", "ncryptsslp.dll", "mscoree.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "propsys.dll", "amsi.dll", "userenv.dll", "gpapi.dll", "wbemcomn.dll", "uxtheme.dll", "windowscodecs.dll", "edputil.dll", "napinsp.dll", "pnrpnsp.dll", "wshbth.dll", "nlaapi.dll", "winrnr.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "LOW", "description": "Injects a PE file into a foreign processes", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: FB5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 9C7008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 11D9008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: FB5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 9C7008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 11D9008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: FB5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 9C7008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 11D9008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "wininet.dll", "iertutil.dll", "sspicli.dll", "windows.storage.dll", "wldp.dll", "profapi.dll", "kernel.appcore.dll", "ondemandconnroutehelper.dll", "winhttp.dll", "mswsock.dll", "iphlpapi.dll", "winnsi.dll", "urlmon.dll", "srvcli.dll", "netutils.dll", "dnsapi.dll", "rasadhlp.dll", "fwpuclnt.dll", "schannel.dll", "mskeyprotect.dll", "ntasn1.dll", "msasn1.dll", "dpapi.dll", "cryptsp.dll", "rsaenh.dll", "cryptbase.dll", "ncrypt.dll", "ncryptsslp.dll", "mscoree.dll", "version.dll", "vcruntime140_clr0400.dll", "ucrtbase_clr0400.dll", "propsys.dll", "amsi.dll", "userenv.dll", "gpapi.dll", "wbemcomn.dll", "uxtheme.dll", "windowscodecs.dll", "edputil.dll", "napinsp.dll", "pnrpnsp.dll", "wshbth.dll", "nlaapi.dll", "winrnr.dll", "dhcpcsvc6.dll", "dhcpcsvc.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "LOW", "description": "Injects a PE file into a foreign processes", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: FB5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 9C7008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 11D9008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: FB5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 9C7008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 11D9008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 value starts with: 4D5A", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: FB5008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 9C7008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 402000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45C000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 45E000", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 11D9008", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe base: 400000 protect: page execute and read and write", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe base: 400000 protect: page execute and read and write"]}]}, {"id": "T1036", "name": "Masquerading", "link": "https://attack.mitre.org/techniques/T1036/", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading.", "signatures": [{"severity": "INFO", "description": "Creates files inside the user directory", "match_data": ["C:\\Users\\user\\AppData\\Local\\Microsoft\\CLR_v4.0_32\\UsageLogs\\CasPol.exe.log"]}]}, {"id": "T1562", "name": "Impair Defenses", "link": "https://attack.mitre.org/techniques/T1562/", "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out, preventing a system from shutting down, or disabling or modifying the update process. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components. These restrictions can further enable malicious operations as well as the continued propagation of incidents."}, {"id": "T1562.001", "name": "Disable or Modify Tools", "link": "https://attack.mitre.org/techniques/T1562/001/", "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Alternatively, they may add new directories to an endpoint detection and response (EDR) tool\u2019s exclusion list, enabling them to hide malicious files via File/Path Exclusions.\nAdversaries may also focus on specific applications such as Sysmon. For example, the \u201cStart\u201d and \u201cEnable\u201d values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. \nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.", "signatures": [{"severity": "INFO", "description": "Creates guard pages, often used to prevent reverse engineering and debugging", "match_data": ["page read and write | page guard", "C:\\Windows\\SysWOW64\\WerFault.exe C:\\Windows\\SysWOW64\\WerFault.exe -u -p 5464 -s 1232"]}, {"severity": "INFO", "description": "Launches processes in debugging mode, may be used to hinder debugging", "match_data": ["page read and write | page guard", "C:\\Windows\\SysWOW64\\WerFault.exe C:\\Windows\\SysWOW64\\WerFault.exe -u -p 5464 -s 1232"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive processor information (via WMI, Win32_Processor, often done to detect virtual machines)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Allocates memory with a write watch (potentially for evading sandboxes)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Contains medium sleeps (>= 30s)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive processor information (via WMI, Win32_Processor, often done to detect virtual machines)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "May sleep (evasive loops) to hinder dynamic analysis", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Allocates memory with a write watch (potentially for evading sandboxes)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Contains long sleeps (>= 3 min)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["delay time: 922337203685477", "delay time: 36000", "delay time: 35878", "delay time: 35754", "delay time: 35441", "delay time: 34567", "delay time: 34379", "delay time: 34216", "delay time: 34054", "delay time: 33941", "delay time: 33816", "delay time: 33691", "delay time: 33493", "delay time: 33368", "delay time: 33252", "delay time: 33129", "delay time: 33004", "delay time: 32879", "delay time: 32762", "delay time: 32629", "delay time: 32504", "delay time: 32348", "delay time: 32222", "delay time: 32097", "delay time: 31958", "delay time: 31831", "delay time: 31707", "delay time: 31582", "delay time: 31457", "delay time: 31318", "delay time: 31191", "delay time: 31066", "delay time: 30941", "delay time: 30816", "delay time: 30691", "delay time: 30566", "delay time: 30441", "delay time: 30301", "delay time: 30175", "delay time: 30051", "delay time: 33000", "delay time: 32875", "delay time: 32765", "delay time: 32652", "delay time: 32532", "delay time: 32407", "DebugPort", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "-34126476536362649s >= -30000s", "-33204139332677172s >= -30000s", "-33000s >= -30000s", "-32875s >= -30000s", "-32765s >= -30000s", "-32652s >= -30000s", "-32532s >= -30000s", "-32407s >= -30000s", "1580000 memory reserve | memory write watch", "3360000 memory reserve | memory write watch", "2F70000 memory reserve | memory write watch", "1630000 memory reserve | memory write watch", "3100000 memory reserve | memory write watch", "5100000 memory reserve | memory write watch", "delay time: 922337203685477", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "Checks if Antivirus program is installed (via WMI)", "match_data": ["IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "DebugPort", "acpi\\ven_qemu&dev_0002,acpi\\qemu0002,*qemu0002", " 0VMware|VIRTUAL|A M I|Xen4win32_process.handle='{0}'", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll%", "<SystemManufacturer>QEMU</SystemManufacturer>", "Hyper-V RAW", "vmGuestLib.dllDselect * from Win32_ComputerSystem", "Microsoft Hyper-V Virtualization Infrastructure Driver", "model0Microsoft|VMWare|Virtual", "            <arg nm=\"sysmfg\" val=\"QEMU\" />", "Hyper-V RAWP9", "acpi/qemu0002/3&11583659&0", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "SBIEDLL.DLL", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "DebugPort", "acpi\\ven_qemu&dev_0002,acpi\\qemu0002,*qemu0002", " 0VMware|VIRTUAL|A M I|Xen4win32_process.handle='{0}'", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll%", "<SystemManufacturer>QEMU</SystemManufacturer>", "Hyper-V RAW", "vmGuestLib.dllDselect * from Win32_ComputerSystem", "Microsoft Hyper-V Virtualization Infrastructure Driver", "model0Microsoft|VMWare|Virtual", "            <arg nm=\"sysmfg\" val=\"QEMU\" />", "Hyper-V RAWP9", "acpi/qemu0002/3&11583659&0", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "SBIEDLL.DLL", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "DebugPort", "acpi\\ven_qemu&dev_0002,acpi\\qemu0002,*qemu0002", " 0VMware|VIRTUAL|A M I|Xen4win32_process.handle='{0}'", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll%", "<SystemManufacturer>QEMU</SystemManufacturer>", "Hyper-V RAW", "vmGuestLib.dllDselect * from Win32_ComputerSystem", "Microsoft Hyper-V Virtualization Infrastructure Driver", "model0Microsoft|VMWare|Virtual", "            <arg nm=\"sysmfg\" val=\"QEMU\" />", "Hyper-V RAWP9", "acpi/qemu0002/3&11583659&0", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "SBIEDLL.DLL", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive processor information (via WMI, Win32_Processor, often done to detect virtual machines)", "match_data": ["IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "DebugPort", "acpi\\ven_qemu&dev_0002,acpi\\qemu0002,*qemu0002", " 0VMware|VIRTUAL|A M I|Xen4win32_process.handle='{0}'", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll%", "<SystemManufacturer>QEMU</SystemManufacturer>", "Hyper-V RAW", "vmGuestLib.dllDselect * from Win32_ComputerSystem", "Microsoft Hyper-V Virtualization Infrastructure Driver", "model0Microsoft|VMWare|Virtual", "            <arg nm=\"sysmfg\" val=\"QEMU\" />", "Hyper-V RAWP9", "acpi/qemu0002/3&11583659&0", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "SBIEDLL.DLL", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "LOW", "description": "Tries to detect sandboxes and other dynamic analysis tools", "match_data": ["IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "DebugPort", "acpi\\ven_qemu&dev_0002,acpi\\qemu0002,*qemu0002", " 0VMware|VIRTUAL|A M I|Xen4win32_process.handle='{0}'", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll%", "<SystemManufacturer>QEMU</SystemManufacturer>", "Hyper-V RAW", "vmGuestLib.dllDselect * from Win32_ComputerSystem", "Microsoft Hyper-V Virtualization Infrastructure Driver", "model0Microsoft|VMWare|Virtual", "            <arg nm=\"sysmfg\" val=\"QEMU\" />", "Hyper-V RAWP9", "acpi/qemu0002/3&11583659&0", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "SBIEDLL.DLL", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["IWbemServices::ExecQuery - root\\SecurityCenter2 : Select * from AntivirusProduct", "DebugPort", "acpi\\ven_qemu&dev_0002,acpi\\qemu0002,*qemu0002", " 0VMware|VIRTUAL|A M I|Xen4win32_process.handle='{0}'", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll%", "<SystemManufacturer>QEMU</SystemManufacturer>", "Hyper-V RAW", "vmGuestLib.dllDselect * from Win32_ComputerSystem", "Microsoft Hyper-V Virtualization Infrastructure Driver", "model0Microsoft|VMWare|Virtual", "            <arg nm=\"sysmfg\" val=\"QEMU\" />", "Hyper-V RAWP9", "acpi/qemu0002/3&11583659&0", "Hyper-V RAW%SystemRoot%\\system32\\mswsock.dll", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor", "SBIEDLL.DLL", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem"]}]}, {"id": "T1010", "name": "Application Window Discovery", "link": "https://attack.mitre.org/techniques/T1010/", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "signatures": [{"severity": "INFO", "description": "Sample monitors Window changes (e.g. starting applications), analyze the sample with the simulation cookbook"}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). On ESXi servers, threat actors may gather system information from various esxcli utilities, such as system hostname get, system version get, and storage filesystem list (to list storage volumes).\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.\nSystem Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment. ", "signatures": [{"severity": "INFO", "description": "Queries the cryptographic machine GUID", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.IO.Compression\\v4.0_4.0.0.0__b77a5c561934e089\\System.IO.Compression.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe VolumeInformation", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.IO.Compression\\v4.0_4.0.0.0__b77a5c561934e089\\System.IO.Compression.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe VolumeInformation", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "LOW", "description": "Queries BIOS Information (via WMI, Win32_Bios)", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.IO.Compression\\v4.0_4.0.0.0__b77a5c561934e089\\System.IO.Compression.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe VolumeInformation", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "INFO", "description": "Checks if Microsoft Office is installed", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.IO.Compression\\v4.0_4.0.0.0__b77a5c561934e089\\System.IO.Compression.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe VolumeInformation", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.IO.Compression\\v4.0_4.0.0.0__b77a5c561934e089\\System.IO.Compression.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe VolumeInformation", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "INFO", "description": "Queries sensitive Operating System Information (via WMI, Win32_ComputerSystem, often done to detect virtual machines)", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.IO.Compression\\v4.0_4.0.0.0__b77a5c561934e089\\System.IO.Compression.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe VolumeInformation", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}, {"severity": "INFO", "description": "Queries process information (via WMI, Win32_Process)", "match_data": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography MachineGuid", "HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_BaseBoard", "HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\15.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\CasPol.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Windows.Forms\\v4.0_4.0.0.0__b77a5c561934e089\\System.Windows.Forms.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Drawing\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Drawing.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.IO.Compression\\v4.0_4.0.0.0__b77a5c561934e089\\System.IO.Compression.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\\System.Security\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\System.Security.dll VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe VolumeInformation", "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe VolumeInformation", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_ComputerSystem", "IWbemServices::CreateInstanceEnum - root\\cimv2 : Win32_Processor"]}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1003", "name": "OS Credential Dumping", "link": "https://attack.mitre.org/techniques/T1003/", "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures. Credentials can then be used to perform Lateral Movement and access restricted information.\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.", "signatures": [{"severity": "LOW", "description": "Tries to harvest and steal browser information (history, passwords, etc)", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\cookies.sqlite", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\000011.ldb", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Web Data", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\places.sqlite", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\formhistory.sqlite", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\000008.ldb", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\000005.ldb", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\key4.db", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\History", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Network\\Cookies"]}]}, {"id": "T1552", "name": "Unsecured Credentials", "link": "https://attack.mitre.org/techniques/T1552/", "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry),  or other specialized files/artifacts (e.g. Private Keys)."}, {"id": "T1552.002", "name": "Credentials in Registry", "link": "https://attack.mitre.org/techniques/T1552/002/", "description": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\nExample commands to find Registry keys related to password information: \n\nLocal Machine Hive: reg query HKLM /f password /t REG_SZ /s\nCurrent User Hive: reg query HKCU /f password /t REG_SZ /s\n", "signatures": [{"severity": "LOW", "description": "Tries to harvest and steal Putty information (sessions, passwords, etc)", "match_data": ["HKEY_CURRENT_USER\\Software\\Martin Prikryl\\WinSCP 2\\Sessions"]}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1114", "name": "Email Collection", "link": "https://attack.mitre.org/techniques/T1114/", "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Emails may also contain details of ongoing incident response operations, which may allow adversaries to adjust their techniques in order to maintain persistence or evade defenses. Adversaries can collect or forward email from mail servers or clients. ", "signatures": [{"severity": "LOW", "description": "Tries to search for mail accounts", "match_data": ["HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows Messaging Subsystem\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676"]}]}, {"id": "T1005", "name": "Data from Local System", "link": "https://attack.mitre.org/techniques/T1005/", "description": "Adversaries may search local system sources, such as file systems, configuration files, local databases, or virtual machine files, to find files of interest and sensitive data prior to Exfiltration.\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.", "signatures": [{"severity": "LOW", "description": "Found many strings related to Crypto-Wallets (likely being stolen)", "match_data": ["Electrumk", "ElectronCash", "Jaxx Liberty!", "q3C:\\Users\\user\\AppData\\Roaming\\Exodus\\exodus.wallet", "ElectrumLTC", "q0C:\\Users\\user\\AppData\\Roaming\\Ethereum\\keystore", "Exodus", "C:\\Users\\user\\AppData\\Roaming\\Binance\\configigfig\\Config.json", "Ethereum", "q5C:\\Users\\user\\AppData\\Local\\Coinomi\\Coinomi\\wallets", "KeyStore", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\cookies.sqlite", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\000011.ldb", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Web Data", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\places.sqlite", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\formhistory.sqlite", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\000008.ldb", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\000005.ldb", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\key4.db", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\History", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Network\\Cookies"]}, {"severity": "LOW", "description": "Tries to harvest and steal browser information (history, passwords, etc)", "match_data": ["Electrumk", "ElectronCash", "Jaxx Liberty!", "q3C:\\Users\\user\\AppData\\Roaming\\Exodus\\exodus.wallet", "ElectrumLTC", "q0C:\\Users\\user\\AppData\\Roaming\\Ethereum\\keystore", "Exodus", "C:\\Users\\user\\AppData\\Roaming\\Binance\\configigfig\\Config.json", "Ethereum", "q5C:\\Users\\user\\AppData\\Local\\Coinomi\\Coinomi\\wallets", "KeyStore", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\cookies.sqlite", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\000011.ldb", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Web Data", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\places.sqlite", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\History", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\formhistory.sqlite", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\000008.ldb", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\000005.ldb", "C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\key4.db", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\History", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Network\\Cookies"]}]}, {"id": "T1115", "name": "Clipboard Data", "link": "https://attack.mitre.org/techniques/T1115/", "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. \nFor example, on Windows adversaries can access clipboard data by using clip.exe or Get-Clipboard. Additionally, adversaries may monitor then replace users\u2019 clipboard with their data (e.g., Transmitted Data Manipulation).\nmacOS and Linux also have commands, such as pbpaste, to grab clipboard contents.", "signatures": [{"severity": "INFO", "description": "Creates a window with clipboard capturing capabilities", "match_data": ["window name: CLIPBRDWNDCLASS"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1573", "name": "Encrypted Channel", "link": "https://attack.mitre.org/techniques/T1573/", "description": "Adversaries may employ an encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "signatures": [{"severity": "INFO", "description": "Uses HTTPS", "match_data": ["HTTP traffic on port 443 -> 49682", "HTTP traffic on port 49682 -> 443"]}, {"severity": "INFO", "description": "Uses HTTPS for network communication, use the SSL MITM Proxy cookbook for further analysis", "match_data": ["HTTP traffic on port 443 -> 49682", "HTTP traffic on port 49682 -> 443"]}]}, {"id": "T1571", "name": "Non-Standard Port", "link": "https://attack.mitre.org/techniques/T1571/", "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.", "signatures": [{"severity": "INFO", "description": "Detected TCP or UDP traffic on non-standard ports", "match_data": ["192.168.122.100:49683 -> 23.95.162.99:7702"]}]}, {"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.\nIn ESXi environments, adversaries may leverage the Virtual Machine Communication Interface (VMCI) for communication between guest virtual machines and the ESXi host. This traffic is similar to client-server communications on traditional network sockets but is localized to the physical machine running the ESXi host, meaning it does not traverse external networks (routers, switches). This results in communications that are invisible to external monitoring and standard networking tools like tcpdump, netstat, nmap, and Wireshark. By adding a VMCI backdoor to a compromised ESXi host, adversaries may persistently regain access from any guest VM to the compromised ESXi host\u2019s backdoor, regardless of network segmentation or firewall rules in place.", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: bitbucket.org", "DNS query: 167.187.14.0.in-addr.arpa"]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Performs DNS lookups", "match_data": ["DNS query: bitbucket.org", "DNS query: 167.187.14.0.in-addr.arpa", "HTTP traffic on port 443 -> 49682", "HTTP traffic on port 49682 -> 443"]}, {"severity": "INFO", "description": "Uses HTTPS", "match_data": ["DNS query: bitbucket.org", "DNS query: 167.187.14.0.in-addr.arpa", "HTTP traffic on port 443 -> 49682", "HTTP traffic on port 49682 -> 443"]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/47a2cb50c1eb09f761d638f918d194cb27eac6edcd0d123cdee797af7a19c4c7/behaviour_mitre_trees"}}