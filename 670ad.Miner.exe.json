{"data": {"CAPA": {"tactics": [{"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."}, {"id": "T1497.001", "name": "System Checks", "link": "https://attack.mitre.org/techniques/T1497/001/", "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as malware, sample, or hash.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.", "signatures": [{"severity": "INFO", "description": "reference anti-VM strings targeting Xen"}]}]}]}, "CAPE Sandbox": {"tactics": [{"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "signatures": [{"severity": "UNKNOWN", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture."}]}, {"id": "T1010", "name": "Application Window Discovery", "link": "https://attack.mitre.org/techniques/T1010/", "description": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade.\nAdversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to get a listing of open application windows."}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. \nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to get information about running processes on a system."}]}, {"id": "T1012", "name": "Query Registry", "link": "https://attack.mitre.org/techniques/T1012/", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software."}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments."}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit."}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code."}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "UNKNOWN", "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic."}]}]}]}, "Zenbox": {"tactics": [{"id": "TA0003", "name": "Persistence", "link": "https://attack.mitre.org/tactics/TA0003/", "description": "The adversary is trying to maintain their foothold.\n\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "winmm.dll", "wininet.dll", "sspicli.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "iertutil.dll", "windows.storage.dll", "wldp.dll", "profapi.dll", "kernel.appcore.dll", "ondemandconnroutehelper.dll", "winhttp.dll", "mswsock.dll", "iphlpapi.dll", "winnsi.dll", "urlmon.dll", "srvcli.dll", "netutils.dll", "dpapi.dll", "cryptbase.dll", "ntmarta.dll", "uxtheme.dll", "windowscodecs.dll"]}]}]}, {"id": "TA0004", "name": "Privilege Escalation", "link": "https://attack.mitre.org/tactics/TA0004/", "description": "The adversary is trying to gain higher-level permissions.\n\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "winmm.dll", "wininet.dll", "sspicli.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "iertutil.dll", "windows.storage.dll", "wldp.dll", "profapi.dll", "kernel.appcore.dll", "ondemandconnroutehelper.dll", "winhttp.dll", "mswsock.dll", "iphlpapi.dll", "winnsi.dll", "urlmon.dll", "srvcli.dll", "netutils.dll", "dpapi.dll", "cryptbase.dll", "ntmarta.dll", "uxtheme.dll", "windowscodecs.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "HIGH", "description": "Early bird code injection technique detected", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Injects a PE file into a foreign processes", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Queues an APC in another process (thread injection)", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}]}]}, {"id": "TA0005", "name": "Defense Evasion", "link": "https://attack.mitre.org/tactics/TA0005/", "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ", "techniques": [{"id": "T1574", "name": "Hijack Execution Flow", "link": "https://attack.mitre.org/techniques/T1574/", "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."}, {"id": "T1574.002", "name": "DLL Side-Loading", "link": "https://attack.mitre.org/techniques/T1574/002/", "description": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to DLL Search Order Hijacking, side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.", "signatures": [{"severity": "INFO", "description": "Tries to load missing DLLs", "match_data": ["apphelp.dll", "winmm.dll", "wininet.dll", "sspicli.dll", "rstrtmgr.dll", "ncrypt.dll", "ntasn1.dll", "iertutil.dll", "windows.storage.dll", "wldp.dll", "profapi.dll", "kernel.appcore.dll", "ondemandconnroutehelper.dll", "winhttp.dll", "mswsock.dll", "iphlpapi.dll", "winnsi.dll", "urlmon.dll", "srvcli.dll", "netutils.dll", "dpapi.dll", "cryptbase.dll", "ntmarta.dll", "uxtheme.dll", "windowscodecs.dll"]}]}, {"id": "T1055", "name": "Process Injection", "link": "https://attack.mitre.org/techniques/T1055/", "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ", "signatures": [{"severity": "HIGH", "description": "Early bird code injection technique detected", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Injects a PE file into a foreign processes", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Writes to foreign memory regions", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Queues an APC in another process (thread injection)", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}, {"severity": "LOW", "description": "Allocates memory in foreign processes", "match_data": ["C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 value starts with: 4D5A", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000", "target process: C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe", "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe base: 1AF2D580000 protect: page execute and read and write"]}]}, {"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Contains capabilities to detect virtual machines", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Checks for debuggers (window names)", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}]}, {"id": "T1027", "name": "Obfuscated Files or Information", "link": "https://attack.mitre.org/techniques/T1027/", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. \nAdversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   ", "signatures": [{"severity": "INFO", "description": "Binary may include packed or crypted data", "match_data": ["section name:         entropy: 7.912168421457475", "Entrypont disasm: arithmetic instruction to all instruction ratio: 1.0 > 0.5 instr diversity: 0.5"]}, {"severity": "INFO", "description": "PE file has a high occurrence of arithmetic instructions at the PE entrypoint (possbibily packed)", "match_data": ["section name:         entropy: 7.912168421457475", "Entrypont disasm: arithmetic instruction to all instruction ratio: 1.0 > 0.5 instr diversity: 0.5"]}]}, {"id": "T1027.002", "name": "Software Packing", "link": "https://attack.mitre.org/techniques/T1027/002/", "description": "Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. \nUtilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.  ", "signatures": [{"severity": "INFO", "description": "Binary may include packed or crypted data", "match_data": ["section name:         entropy: 7.912168421457475"]}]}]}, {"id": "TA0007", "name": "Discovery", "link": "https://attack.mitre.org/tactics/TA0007/", "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ", "techniques": [{"id": "T1497", "name": "Virtualization/Sandbox Evasion", "link": "https://attack.mitre.org/techniques/T1497/", "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors.\nAdversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.", "signatures": [{"severity": "INFO", "description": "Contains capabilities to detect virtual machines", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Checks for debuggers (window names)", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}]}, {"id": "T1518", "name": "Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/", "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nSuch software may be deployed widely across the environment for configuration management or security reasons, such as Software Deployment Tools, and may allow adversaries broad access to infect devices or move laterally.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."}, {"id": "T1518.001", "name": "Security Software Discovery", "link": "https://attack.mitre.org/techniques/T1518/001/", "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents  may collect  metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.", "signatures": [{"severity": "INFO", "description": "Contains capabilities to detect virtual machines", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Hyper-V RAWu", "Hyper-V RAW", "First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "window name: Regmonclass", "window name: Filemonclass", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Hyper-V RAWu", "Hyper-V RAW", "First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "window name: Regmonclass", "window name: Filemonclass", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Tries to evade debugger and weak emulator (self modifying code)", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Hyper-V RAWu", "Hyper-V RAW", "First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "window name: Regmonclass", "window name: Filemonclass", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Tries to detect process monitoring tools (Task Manager, Process Explorer etc.)", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Hyper-V RAWu", "Hyper-V RAW", "First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "window name: Regmonclass", "window name: Filemonclass", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "LOW", "description": "Checks for debuggers (window names)", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Hyper-V RAWu", "Hyper-V RAW", "First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "window name: Regmonclass", "window name: Filemonclass", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}, {"severity": "INFO", "description": "Checks if the current process is being debugged", "match_data": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\{4d36e968-e325-11ce-bfc1-08002be10318}\\0000 name: DriverDesc", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: SystemBiosVersion", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System name: VideoBiosVersion", "Hyper-V RAWu", "Hyper-V RAW", "First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "window name: FilemonClass", "window name: PROCMON_WINDOW_CLASS", "window name: RegmonClass", "window name: Regmonclass", "window name: Filemonclass", "regmonclass", "process monitor - sysinternals: www.sysinternals.com", "procmon_window_class", "registry monitor - sysinternals: www.sysinternals.com", "filemonclass", "file monitor - sysinternals: www.sysinternals.com", "DebugPort", "DebugObjectHandle"]}]}, {"id": "T1057", "name": "Process Discovery", "link": "https://attack.mitre.org/techniques/T1057/", "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Administrator or otherwise elevated access may provide better process details. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or Get-Process via PowerShell. Information about processes can also be extracted from the output of Native API calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc. \nOn network devices, Network Device CLI commands such as show processes can be used to display current running processes.", "signatures": [{"severity": "INFO", "description": "Queries a list of all running processes", "match_data": ["ProcessInformation"]}]}, {"id": "T1083", "name": "File and Directory Discovery", "link": "https://attack.mitre.org/techniques/T1083/", "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate. Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. dir, show flash, and/or nvram).\nSome files and directories may require elevated or specific user permissions to access.", "signatures": [{"severity": "INFO", "description": "Enumerates the file system", "match_data": ["C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\nmmhkkegccagdldgiimedpiccmgmieda\\1.0.0.6_0\\_locales\\bg\\", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\nmmhkkegccagdldgiimedpiccmgmieda\\1.0.0.6_0\\html\\", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\nmmhkkegccagdldgiimedpiccmgmieda\\1.0.0.6_0\\images\\", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\nmmhkkegccagdldgiimedpiccmgmieda\\1.0.0.6_0\\", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\nmmhkkegccagdldgiimedpiccmgmieda\\1.0.0.6_0\\_locales\\", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Extensions\\nmmhkkegccagdldgiimedpiccmgmieda\\1.0.0.6_0\\css\\"]}]}, {"id": "T1082", "name": "System Information Discovery", "link": "https://attack.mitre.org/techniques/T1082/", "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.", "signatures": [{"severity": "LOW", "description": "Tries to evade debugger and weak emulator (self modifying code)", "match_data": ["First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\ VolumeInformation"]}, {"severity": "INFO", "description": "Queries information about the installed CPU (vendor, model number etc)", "match_data": ["First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\ VolumeInformation"]}, {"severity": "INFO", "description": "Reads software policies", "match_data": ["First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\ VolumeInformation"]}, {"severity": "INFO", "description": "Queries the volume information (name, serial number etc) of a device", "match_data": ["First address: 7FF620C07D37 instructions  caused by: Self-modifying code", "HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Safer\\CodeIdentifiers", "C:\\ VolumeInformation"]}]}]}, {"id": "TA0006", "name": "Credential Access", "link": "https://attack.mitre.org/tactics/TA0006/", "description": "The adversary is trying to steal account names and passwords.\n\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "techniques": [{"id": "T1003", "name": "OS Credential Dumping", "link": "https://attack.mitre.org/techniques/T1003/", "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password. Credentials can be obtained from OS caches, memory, or structures. Credentials can then be used to perform Lateral Movement and access restricted information.\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.", "signatures": [{"severity": "LOW", "description": "Tries to harvest and steal browser information (history, passwords, etc)", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\cookies.sqlite", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Web Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Network\\Cookies"]}]}]}, {"id": "TA0009", "name": "Collection", "link": "https://attack.mitre.org/tactics/TA0009/", "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.", "techniques": [{"id": "T1005", "name": "Data from Local System", "link": "https://attack.mitre.org/techniques/T1005/", "description": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\nAdversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system.", "signatures": [{"severity": "LOW", "description": "Tries to harvest and steal browser information (history, passwords, etc)", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\cookies.sqlite", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Web Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Network\\Cookies", "\\Electrum-LTC\\wallets\\", "\\ElectronCash\\wallets\\", "\\Electrum\\wallets\\", "exodus.conf.json,window-state.json", "Jaxx Liberty", "\\Exodus\\exodus.wallet", "d.seco,info.seco", "ElectrumLTC", "passphrase.json,seed.seco,info.seco", "\\Ethereum\\", "C:\\Users\\user\\AppData\\Roaming\\Binance\\\\**I", "Ethereum\\", "\\Coinomi\\Coinomi\\wallets\\", "multidoge.wallet", "\\Exodus\\exodus.wallet\\", "keystore", "C:\\Users\\user\\AppData\\Roaming\\Ledger Live\\Local Storage\\leveldb\\\\*", "C:\\Users\\user\\AppData\\Roaming\\Electrum\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\Electrum-LTC\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\Ledger Live\\Local Storage\\leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\Ledger Live\\", "C:\\Users\\user\\AppData\\Roaming\\Exodus\\", "C:\\Users\\user\\AppData\\Roaming\\Exodus\\exodus.wallet\\", "C:\\Users\\user\\AppData\\Roaming\\ElectronCash\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\MultiDoge\\", "C:\\Users\\user\\AppData\\Roaming\\com.liberty.jaxx\\IndexedDB\\file__0.indexeddb.leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\atomic\\Local Storage\\leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\Binance\\", "C:\\Users\\user\\AppData\\Roaming\\Coinomi\\Coinomi\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\atomic_qt\\config\\", "C:\\Users\\user\\AppData\\Roaming\\atomic_qt\\exports\\", "C:\\Users\\user\\AppData\\Roaming\\Guarda\\IndexedDB\\https_guarda.co_0.indexeddb.leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\Guarda\\Local Storage\\leveldb\\"]}, {"severity": "LOW", "description": "Found many strings related to Crypto-Wallets (likely being stolen)", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\cookies.sqlite", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Web Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Network\\Cookies", "\\Electrum-LTC\\wallets\\", "\\ElectronCash\\wallets\\", "\\Electrum\\wallets\\", "exodus.conf.json,window-state.json", "Jaxx Liberty", "\\Exodus\\exodus.wallet", "d.seco,info.seco", "ElectrumLTC", "passphrase.json,seed.seco,info.seco", "\\Ethereum\\", "C:\\Users\\user\\AppData\\Roaming\\Binance\\\\**I", "Ethereum\\", "\\Coinomi\\Coinomi\\wallets\\", "multidoge.wallet", "\\Exodus\\exodus.wallet\\", "keystore", "C:\\Users\\user\\AppData\\Roaming\\Ledger Live\\Local Storage\\leveldb\\\\*", "C:\\Users\\user\\AppData\\Roaming\\Electrum\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\Electrum-LTC\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\Ledger Live\\Local Storage\\leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\Ledger Live\\", "C:\\Users\\user\\AppData\\Roaming\\Exodus\\", "C:\\Users\\user\\AppData\\Roaming\\Exodus\\exodus.wallet\\", "C:\\Users\\user\\AppData\\Roaming\\ElectronCash\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\MultiDoge\\", "C:\\Users\\user\\AppData\\Roaming\\com.liberty.jaxx\\IndexedDB\\file__0.indexeddb.leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\atomic\\Local Storage\\leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\Binance\\", "C:\\Users\\user\\AppData\\Roaming\\Coinomi\\Coinomi\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\atomic_qt\\config\\", "C:\\Users\\user\\AppData\\Roaming\\atomic_qt\\exports\\", "C:\\Users\\user\\AppData\\Roaming\\Guarda\\IndexedDB\\https_guarda.co_0.indexeddb.leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\Guarda\\Local Storage\\leveldb\\"]}, {"severity": "LOW", "description": "Tries to steal Crypto Currency Wallets", "match_data": ["C:\\Users\\user\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\1hmu7354.default-release\\cookies.sqlite", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Web Data", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Network\\Cookies", "C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data", "C:\\Users\\user\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\Network\\Cookies", "\\Electrum-LTC\\wallets\\", "\\ElectronCash\\wallets\\", "\\Electrum\\wallets\\", "exodus.conf.json,window-state.json", "Jaxx Liberty", "\\Exodus\\exodus.wallet", "d.seco,info.seco", "ElectrumLTC", "passphrase.json,seed.seco,info.seco", "\\Ethereum\\", "C:\\Users\\user\\AppData\\Roaming\\Binance\\\\**I", "Ethereum\\", "\\Coinomi\\Coinomi\\wallets\\", "multidoge.wallet", "\\Exodus\\exodus.wallet\\", "keystore", "C:\\Users\\user\\AppData\\Roaming\\Ledger Live\\Local Storage\\leveldb\\\\*", "C:\\Users\\user\\AppData\\Roaming\\Electrum\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\Electrum-LTC\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\Ledger Live\\Local Storage\\leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\Ledger Live\\", "C:\\Users\\user\\AppData\\Roaming\\Exodus\\", "C:\\Users\\user\\AppData\\Roaming\\Exodus\\exodus.wallet\\", "C:\\Users\\user\\AppData\\Roaming\\ElectronCash\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\MultiDoge\\", "C:\\Users\\user\\AppData\\Roaming\\com.liberty.jaxx\\IndexedDB\\file__0.indexeddb.leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\atomic\\Local Storage\\leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\Binance\\", "C:\\Users\\user\\AppData\\Roaming\\Coinomi\\Coinomi\\wallets\\", "C:\\Users\\user\\AppData\\Roaming\\atomic_qt\\config\\", "C:\\Users\\user\\AppData\\Roaming\\atomic_qt\\exports\\", "C:\\Users\\user\\AppData\\Roaming\\Guarda\\IndexedDB\\https_guarda.co_0.indexeddb.leveldb\\", "C:\\Users\\user\\AppData\\Roaming\\Guarda\\Local Storage\\leveldb\\"]}]}]}, {"id": "TA0011", "name": "Command and Control", "link": "https://attack.mitre.org/tactics/TA0011/", "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.", "techniques": [{"id": "T1095", "name": "Non-Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1095/", "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.", "signatures": [{"severity": "INFO", "description": "Posts data to webserver", "match_data": ["POST /3d15e67552d448ff.php HTTP/1.1Content-Type: application/jsonHost: 45.93.20.28Content-Length: 132Cache-Control: no-cacheData Raw: 65 77 6f 67 49 43 41 67 49 6d 4a 31 61 57 78 6b 49 6a 6f 67 49 6e "]}]}, {"id": "T1071", "name": "Application Layer Protocol", "link": "https://attack.mitre.org/techniques/T1071/", "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, DNS, or publishing/subscribing. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ", "signatures": [{"severity": "INFO", "description": "Posts data to webserver", "match_data": ["POST /3d15e67552d448ff.php HTTP/1.1Content-Type: application/jsonHost: 45.93.20.28Content-Length: 132Cache-Control: no-cacheData Raw: 65 77 6f 67 49 43 41 67 49 6d 4a 31 61 57 78 6b 49 6a 6f 67 49 6e "]}]}]}]}}, "links": {"self": "https://www.virustotal.com/api/v3/files/670adfe1bf2a904fd1bee683d49933cd5ccf38c8b4aa950d63ca18f26fb831bf/behaviour_mitre_trees"}}